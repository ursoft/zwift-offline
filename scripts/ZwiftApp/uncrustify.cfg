#
# K&R (sort-of)
#

indent_with_tabs = 0 # spaces, 1=indent to level only, 2=indent with tabs
input_tab_size = 4 # original tab size
output_tab_size = 4 # new tab size
indent_columns = output_tab_size
indent_label = 1 # pos: absolute col, neg: relative column
# indent_align_string = False # align broken strings
# indent_brace = 0
indent_switch_case = output_tab_size
indent_class = true
use_indent_continue_only_once = false # true/false
indent_cpp_lambda_only_once = true # true/false
cmt_convert_tab_to_spaces = true # true/false
indent_else_if = true

nl_enum_brace = remove # "enum {" vs "enum \n {"
nl_union_brace = remove # "union {" vs "union \n {"
nl_struct_brace = remove # "struct {" vs "struct \n {"
nl_do_brace = remove # "do {" vs "do \n {"
nl_if_brace = remove # "if () {" vs "if () \n {"
nl_for_brace = remove # "for () {" vs "for () \n {"
nl_else_brace = remove # "else {" vs "else \n {"
nl_while_brace = remove # "while () {" vs "while () \n {"
nl_switch_brace = remove # "switch () {" vs "switch () \n {"
# nl_func_var_def_blk = 1
# nl_before_case = 1
nl_fcall_brace = remove # "foo() {" vs "foo()\n{"
nl_fdef_brace = remove # "int foo() {" vs "int foo()\n{"
nl_brace_while = remove
nl_brace_else = remove
nl_elseif_brace = remove
nl_squeeze_ifdef = TRUE
nl_before_opening_brace_func_class_def = remove
nl_namespace_two_to_one_liner = true
nl_assign_leave_one_liners = true
nl_getset_leave_one_liners = true
nl_func_leave_one_liners = true
nl_cpp_lambda_leave_one_liners = true
nl_if_leave_one_liners = true
nl_while_leave_one_liners = true
nl_do_leave_one_liners = true
nl_for_leave_one_liners = true
nl_collapse_empty_body = true
nl_end_of_file = ignore
nl_before_if_closing_paren = remove
nl_brace_finally = remove
nl_finally_brace = remove
nl_try_brace = remove
nl_else_if = remove
nl_class_brace = remove
nl_brace_catch = remove
nl_catch_brace = remove

sp_finally_brace = force
sp_brace_finally = force
sp_after_noexcept = force
sp_after_new = force
sp_paren_noexcept = force
sp_brace_close_while = force
sp_do_brace_open = force
sp_try_brace = force
sp_brace_catch = force
sp_else_brace = force
sp_brace_else = force
sp_before_semi = remove
sp_paren_paren = remove # space between (( and ))
sp_return_paren = force # "return (1);" vs "return(1);"
sp_sizeof_paren = remove # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen = force # "if (" vs "if("
sp_after_sparen = force # "if () {" vs "if (){"
sp_after_cast = remove # "(int) a" vs "(int)a"
sp_inside_braces = force # "{ 1 }" vs "{1}"
sp_inside_braces_struct = force # "{ 1 }" vs "{1}"
sp_inside_braces_enum = force # "{ 1 }" vs "{1}"
sp_inside_paren = remove # "( 1 )" vs "(1)"
sp_inside_fparen = remove # "( 1 )" vs "(1)" - functions
sp_inside_sparen = remove # "( 1 )" vs "(1)" - if/for/etc
# sp_type_func = ignore
sp_assign = force
sp_arith = force
sp_bool = force
sp_compare = force
sp_after_comma = force
sp_func_def_paren = remove # "int foo (){" vs "int foo(){"
sp_func_def_paren_empty = remove
sp_func_call_paren = remove # "foo (" vs "foo("
sp_func_proto_paren = remove # "int foo ();" vs "int foo();"
sp_cpp_lambda_square_paren = remove
sp_cpp_lambda_square_brace = force
sp_cpp_lambda_argument_list = remove
sp_cpp_lambda_assign = force # ignore/add/remove/force/not_defined
sp_cpp_lambda_paren_brace = force # ignore/add/remove/force/not_defined
sp_cpp_lambda_fparen = remove # ignore/add/remove/force/not_defined
sp_paren_brace = force
sp_after_class_colon = force
sp_before_class_colon = force
sp_after_constr_colon = force
sp_before_constr_colon = force
sp_after_decltype = force
sp_fparen_brace = force
sp_before_ptr_star = force
sp_between_ptr_star = remove
sp_after_ptr_star = remove
sp_before_byref = force
sp_after_byref = remove
sp_special_semi = force
sp_cond_colon = force
sp_cond_question = force
sp_before_tr_cmt = add # ignore/add/remove/force/not_defined
sp_num_before_tr_cmt = 1 # unsigned number
sp_before_semi = ignore
sp_inside_braces_empty = remove
sp_brace_typedef = force
sp_enum_paren = force
sp_enum_colon = force

align_with_tabs = FALSE # use tabs to align
# align_on_tabstop = FALSE # align on tabstops
# align_enum_equ_span = 4
# align_nl_cont = TRUE
align_var_def_span = 2
align_var_def_thresh = 10
align_var_class_span = 2
align_var_class_thresh = 10
align_var_class_gap = 1 # unsigned number
align_var_struct_gap = 1 # unsigned number
align_var_def_gap = 1 # unsigned number
align_var_struct_span = 2
align_var_struct_thresh = 10
# align_var_def_inline = TRUE
# align_var_def_star = TRUE
# align_var_def_colon = TRUE
# align_assign_span = 1
# align_struct_init_span = 3
# align_var_struct_span = 3
align_right_cmt_span = 2
align_right_cmt_gap = 1
# align_pp_define_span = 3
# align_pp_define_gap = 4
# align_number_right = TRUE
# align_typedef_span = 5
# align_typedef_gap = 3
align_var_def_star_style = 1 # unsigned number
align_var_def_amp_style = 1 # unsigned number

# cmt_star_cont = TRUE

eat_blanks_before_close_brace = true
eat_blanks_after_open_brace = TRUE
cmt_indent_multi = FALSE
mod_add_long_namespace_closebrace_comment = 10
# mod_full_brace_if_chain = 1
mod_full_brace_nl_block_rem_mlcond = true
mod_remove_extra_semicolon = TRUE
mod_paren_on_return = remove # "return 1;" vs "return (1);"
# mod_full_brace_if = add # "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for = add # "for () a--;" vs "for () { a--; }"
# mod_full_brace_do = add # "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while = add # "while (a) a--;" vs "while (a) { a--; }"
