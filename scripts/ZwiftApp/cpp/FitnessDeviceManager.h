#pragma once
struct FitnessDeviceManager {
    static inline uint32_t m_lastBLESearchTime;
    static void TrainerSetSimGrade(float v);
    static void Initialize();
    static void SetInitialRotationZC();
    /*FitnessDeviceManager::AddDevice(ExerciseDevice *,char const*)
FitnessDeviceManager::AddDeviceToKnownDatabase(uint,uint,char const*)
FitnessDeviceManager::AddDeviceToKnownDatabase(uint,uint,char const*,uint)
FitnessDeviceManager::AddDevicesToReconnectAfterBackgrounding(void)
FitnessDeviceManager::AddLostDevice(uint)
FitnessDeviceManager::ApplyRotationDeadZone(float,float)
FitnessDeviceManager::AreAnyBLEDevicesCurrentlyPaired(void)
FitnessDeviceManager::ClearAllLastSelectedDevicesFromPrefs(void)
FitnessDeviceManager::ClearLastSelectedDeviceFromPrefs(DeviceComponent::ComponentType)
FitnessDeviceManager::ClearLostDevices(void)
FitnessDeviceManager::ClearSelectedDevice(ExerciseDevice *)
FitnessDeviceManager::CreateDeviceAnalyticsProperties(BLEDevice const*)
FitnessDeviceManager::CreateErrorEventName(BLE_ERROR_TYPE)
FitnessDeviceManager::CurrentConfigurationSupportsERGMode(void)
FitnessDeviceManager::DisableAll(void)
FitnessDeviceManager::DoesSteeringDeviceHaveSignal(InputDeviceType)
FitnessDeviceManager::EndWorkout(void)
FitnessDeviceManager::FindDevice(uint)
FitnessDeviceManager::FindFriendlyName(uint)
FitnessDeviceManager::FindMfgAndModel(uint)
FitnessDeviceManager::ForceDeviceChangeSignal(void)
FitnessDeviceManager::GetAcceleration(int &,int &,double &,double &,double &)
FitnessDeviceManager::GetConfirmedTrainerSlope(void)
FitnessDeviceManager::GetCurrentBrakingForce(void)
FitnessDeviceManager::GetCurrentCadence(void)
FitnessDeviceManager::GetCurrentCalorieRate(void)
FitnessDeviceManager::GetCurrentDeltaRollZC(void)
FitnessDeviceManager::GetCurrentDeltaYaw(void)
FitnessDeviceManager::GetCurrentHeartRate(void)
FitnessDeviceManager::GetCurrentMachineState(void)
FitnessDeviceManager::GetCurrentPower(void)
FitnessDeviceManager::GetCurrentRotationLimit(void)
FitnessDeviceManager::GetCurrentRowingSpeed(void)
FitnessDeviceManager::GetCurrentSpeed(void)
FitnessDeviceManager::GetCurrentSteeringHeading(void)
FitnessDeviceManager::GetCurrentWheelRPM(void)
FitnessDeviceManager::GetDeviceNameAndModel(ExerciseDevice const*)
FitnessDeviceManager::GetEliteSteeringComponent(ExerciseDevice *)
FitnessDeviceManager::GetEquipmentTypesString(BLEDevice const*)
FitnessDeviceManager::GetJetBlackSteeringComponent(ExerciseDevice *)
FitnessDeviceManager::GetLastConfirmationDelay(void)
FitnessDeviceManager::GetPairingSport(void)
FitnessDeviceManager::GetPreferedBLEConnectionType(void)
FitnessDeviceManager::GetSelectedBLEDeviceCount(void)
FitnessDeviceManager::GetSteeringSensitivity(void)
FitnessDeviceManager::GetTrainerGradeLookAhead(void)
FitnessDeviceManager::GetTrainerSlope(void)
FitnessDeviceManager::GetUnpairedBLEDeviceCount(void)
FitnessDeviceManager::Get_BLEState(void)
FitnessDeviceManager::HandleBLEConnect(uint)
FitnessDeviceManager::HandleBLEError(uint,BLE_ERROR_TYPE,uint)
FitnessDeviceManager::HandleBLEReconnect(uint)
FitnessDeviceManager::HandleCentralManagerResetting(void)
FitnessDeviceManager::HandleDisconnectError(uint,uint)
FitnessDeviceManager::Initialize(void)
FitnessDeviceManager::InitializeBLEStatistics(void)
FitnessDeviceManager::IsAnalogSteeringPaired(void)
FitnessDeviceManager::IsComponentPresent(int)
FitnessDeviceManager::IsDeviceBeingUsedElsewhere(ExerciseDevice *,uint)
FitnessDeviceManager::IsLost(uint)
FitnessDeviceManager::IsNameInList(char const*)
FitnessDeviceManager::IsPairedForCurrentSport(void)
FitnessDeviceManager::IsPowerFromLegitPowerMeter(void)
FitnessDeviceManager::IsPowerFromSmartTrainer(void)
FitnessDeviceManager::IsSmartBikeBrakingPaired(void)
FitnessDeviceManager::IsSmartBikeSteeringPaired(void)
FitnessDeviceManager::IsSmartTrainerAndPowerSourceTheSameDevice(void)
FitnessDeviceManager::IsSteeringDevicePaired(InputDeviceType)
FitnessDeviceManager::IsThisDevicePaired(uint)
FitnessDeviceManager::LoadDeviceProfiles(char const*)
FitnessDeviceManager::PairAuthoritativeSensor(ExerciseDevice *)
FitnessDeviceManager::PairBrakingSensor(ExerciseDevice *)
FitnessDeviceManager::PairCadenceSensor(ExerciseDevice *)
FitnessDeviceManager::PairControllableTrainer(ExerciseDevice *)
FitnessDeviceManager::PairDi2Sensor(ExerciseDevice *)
FitnessDeviceManager::PairHRSensor(ExerciseDevice *)
FitnessDeviceManager::PairPowerSensor(ExerciseDevice *)
FitnessDeviceManager::PairRunCadenceSensor(ExerciseDevice *)
FitnessDeviceManager::PairRunSpeedSensor(ExerciseDevice *)
FitnessDeviceManager::PairSpeedSensor(ExerciseDevice *)
FitnessDeviceManager::PairSteeringSensor(ExerciseDevice *)
FitnessDeviceManager::PreferAllSourcesBLE(void)
FitnessDeviceManager::PreferHubBLE(void)
FitnessDeviceManager::PreferNativeBLE(void)
FitnessDeviceManager::PurgeAllDevices(bool,bool)
FitnessDeviceManager::PurgeAllNonConnectedDevices(bool)
FitnessDeviceManager::RecoverDeviceToReconnectAfterBackgrounding(uint)
FitnessDeviceManager::RecoverLostDevice(uint)
FitnessDeviceManager::RemoveDevice(ExerciseDevice *,bool)
FitnessDeviceManager::ResetAcceleration(void)
FitnessDeviceManager::RestoreAll(void)
FitnessDeviceManager::SaveDeviceProfiles(char const*)
FitnessDeviceManager::SendAnalyticsEvent(std::string const&,BLEDevice const*,std::vector<std::string> const&)
FitnessDeviceManager::SendDataLossEvent(ExerciseDevice const*)
FitnessDeviceManager::SendErrorAnalytics(uint,BLE_ERROR_TYPE,uint)
FitnessDeviceManager::SetPairingSport(uint)
FitnessDeviceManager::SetTrainerTargetSpeed(float)
FitnessDeviceManager::SetUISignals(std::weak_ptr<UI_Refactor::DeviceChangedSignal>)
FitnessDeviceManager::Set_BLEState(uint)
FitnessDeviceManager::Set_PreferAllSourcesBLE(bool)
FitnessDeviceManager::Set_PreferHubBLE(bool)
FitnessDeviceManager::Set_PreferNativeBLE(bool)
FitnessDeviceManager::Shutdown(void)
FitnessDeviceManager::StartWorkout(void)
FitnessDeviceManager::TrackDeviceChanges(bool)
FitnessDeviceManager::TrainerCanSpindown(void)
FitnessDeviceManager::TrainerGetSpeed(void)
FitnessDeviceManager::TrainerGetTargetSpeed(void)
FitnessDeviceManager::TrainerInitSpindown(void)
FitnessDeviceManager::TrainerSetERG(int)
FitnessDeviceManager::TrainerSetGradeLookAheadSecs(float)
FitnessDeviceManager::TrainerSetRiderWeightKG(float)
FitnessDeviceManager::TrainerSetRoadMode(void)
FitnessDeviceManager::TrainerSetRoadTexture(RoadFeelType,float)
FitnessDeviceManager::TrainerSetSimGrade(float)
FitnessDeviceManager::TrainerSetSimMode(void)
FitnessDeviceManager::TrainerSetSpindownStatus(uint)
FitnessDeviceManager::TrainerSetWindSpeed(float)
FitnessDeviceManager::TrainerSpindownStatus(void)
FitnessDeviceManager::TrainerSupportErgMode(void)
FitnessDeviceManager::TrainerSupportErgResume(void)
FitnessDeviceManager::TrainerSupportsRoadTexture(void)
FitnessDeviceManager::UnpairAllPairedDevices(bool,bool)
FitnessDeviceManager::UnpairAllPairedDevices_V2(bool)
FitnessDeviceManager::UnpairAuthoritativeSensor(bool)
FitnessDeviceManager::UnpairBrakingSensor(bool)
FitnessDeviceManager::UnpairCadenceSensor(bool)
FitnessDeviceManager::UnpairControllableTrainer(bool)
FitnessDeviceManager::UnpairDi2Sensor(bool)
FitnessDeviceManager::UnpairHRSensor(bool)
FitnessDeviceManager::UnpairPowerSensor(bool)
FitnessDeviceManager::UnpairRunCadenceSensor(bool)
FitnessDeviceManager::UnpairRunSpeedSensor(bool)
FitnessDeviceManager::UnpairSpeedSensor(bool)
FitnessDeviceManager::UnpairSteeringSensor(bool)
FitnessDeviceManager::Update(float)
FitnessDeviceManager::UpdateScanning(float)*/
};