#pragma once
struct RoadMarkerEntity;
struct RoadSegment {
    int m_segmentId = 0;
    VEC3 CalculateRoadPositionAtTime(double, bool);
    VEC3 CalculateRoadPositionAtTimeF(float, bool);
    float GetRoadWidth(double, bool, float *, float *, const RoadMarkerEntity **);
    float GetRiderBoundsRatio();
    virtual double FindClosestPointOnRoad(const VEC3 &, double, int) {}
    virtual void CalculateRoadPositionByDist(double, double, VEC3 *) {}
    virtual float GetCyclistAltitudeAtRoadTime(const VEC3 &, double, bool) { return 0.0f; }
    virtual bool IsPlaceholder() { return true; }
    /*RoadSegment::AddMarkers(Entity *,int *)
RoadSegment::AddPOI(POIEntity *)
RoadSegment::AddSpeedGate(SpeedGateEntity *)
RoadSegment::AllowFullWidthSteering(void)
RoadSegment::CalcPosByShortDistWithOffset(double,double,double,double,VEC3 *)
RoadSegment::CalculateSplinePoints(void)
RoadSegment::CheckForPOI(float)
RoadSegment::CheckForSpeedGates(float,float,bool)
RoadSegment::ConvertDistanceToRoadTime(float)
RoadSegment::ConvertRoadTimeToDistance(double)
RoadSegment::CreateEntityObject(tinyxml2::XMLElement &)
RoadSegment::CreateRoadNodeEntity(tinyxml2::XMLElement &)
RoadSegment::CreateRoadNodeEntity(void)
RoadSegment::FindClosestPointOnRoad2D(VEC3,float,int)
RoadSegment::FindClosestPointOnRoadF(VEC3 const&,float,int)
RoadSegment::GenerateNavRoadMesh(void)
RoadSegment::GenerateRoadMesh(void)
RoadSegment::GetAbsoluteSplineTimeOffsetFromAtoB(double,double,bool)
RoadSegment::GetAllRoadMarkersBasedOnRoadTime(double,std::vector<RoadMarkerEntity const*> *)
RoadSegment::GetCenterRightRatio(void)
RoadSegment::GetClosestForwardIntersectionMarkerToRoadTime(double,bool,uint *)
RoadSegment::GetClosestForwardIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
RoadSegment::GetClosestIntersectionMarkerToRoadTime(double,uint *)
RoadSegment::GetClosestIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
RoadSegment::GetClosestRoadMarkerBasedOnRoadTime(double,uint *)
RoadSegment::GetCourseDistanceAtSplineTime(double,double *)
RoadSegment::GetCourseDistanceBetweenSplineTimes(double,double,bool,double *)
RoadSegment::GetCourseHeightAtDistance(float)
RoadSegment::GetCourseLength(void)
RoadSegment::GetCurvePointCount(void)
RoadSegment::GetDefaultLoiterOffset(void)
RoadSegment::GetDefaultOffset(void)
RoadSegment::GetDefaultRoadStyleIndex(void)
RoadSegment::GetDefaultShoulderWidth(void)
RoadSegment::GetDefaultStyleColor(void)
RoadSegment::GetDefaultWidth(void)
RoadSegment::GetEdgeHalfWidth(double)
RoadSegment::GetFirstNode(void)
RoadSegment::GetFirstRoadMarkerBasedOnRoadTime(double,bool)
RoadSegment::GetGlobalNodeVisualOffset(void)
RoadSegment::GetIntersectionMarkerBasedOnId(int)
RoadSegment::GetIntersectionMarkerBasedOnRoadTime(double)
RoadSegment::GetLastNode(void)
RoadSegment::GetLoiterHalfWidth(double)
RoadSegment::GetMarkerInfluence(double,RoadMarkerEntity const*)
RoadSegment::GetMaxAltitude(void)
RoadSegment::GetMaxExtents(void)
RoadSegment::GetMaxGradient(void)
RoadSegment::GetMaxInstersectionTime(bool,ulong long,uint)
RoadSegment::GetMetersClimbed(void)
RoadSegment::GetMinAltitude(void)
RoadSegment::GetMinExtents(void)
RoadSegment::GetMinimumTessellationDistance(void)
RoadSegment::GetNavDrawLayer(void)
RoadSegment::GetNeighboringRoadNodes(RoadNode *,RoadNode **,RoadNode **)
RoadSegment::GetNodeBasedOnRoadTime(double)
RoadSegment::GetPaddockExitRoadTime(void)
RoadSegment::GetPhysicSlope(void)
RoadSegment::GetRiderOffsetBlendDistance(void)
RoadSegment::GetRoadColor(double)
RoadSegment::GetRoadEdge(VEC3 const&,VEC3,double,float)
RoadSegment::GetRoadMarkers(void)
RoadSegment::GetRoadMarkersPtr(void)
RoadSegment::GetRoadNodeAt(int)
RoadSegment::GetRoadNodeCount(void)
RoadSegment::GetRoadNodesPtr(void)
RoadSegment::GetRoadOffset(double)
RoadSegment::GetRoadPointLinearDistanceAt(int)
RoadSegment::GetRoadSamplePoints(void)
RoadSegment::GetRoadTextureLength(void)
RoadSegment::GetRoadTextureWidthScale(void)
RoadSegment::GetSecondLastNode(void)
RoadSegment::GetSecondNode(void)
RoadSegment::GetShoulderHalfWidth(double)
RoadSegment::GetSmallDistanceRoadTime(void)
RoadSegment::GetSpeedGates(void)
RoadSegment::GetSplineTimeAtCourseDistance(float)
RoadSegment::GetSplineType(void)
RoadSegment::GetStyleIndex(double,uint &,uint *)
RoadSegment::GetTesselationCount(void)
RoadSegment::GetTintColor(void)
RoadSegment::IndexOfNode(RoadNode const*)
RoadSegment::IsFirstNode(RoadNode const*)
RoadSegment::IsLastNode(RoadNode const*)
RoadSegment::IsLooped(void)
RoadSegment::IsOneWay(void)
RoadSegment::IsPointInRoadRegion(VEC3 const&)
RoadSegment::IsPointInRoadRegion2D(VEC3 const&)
RoadSegment::IsPreviousNodeStraight(RoadNode const*)
RoadSegment::IsRightTraffic(void)
RoadSegment::IsRoadInvisible(double)
RoadSegment::IsRoadMarker(Entity *)
RoadSegment::IsSecondLastNode(RoadNode const*)
RoadSegment::IsSecondNode(RoadNode const*)
RoadSegment::Load(tinyxml2::XMLElement *)
RoadSegment::NavRender(VEC4 const&,double,double)
RoadSegment::PostInitialize(void)
RoadSegment::RecordRiderOffCourse(float,bool)
RoadSegment::Render(GFX_RenderPass)
RoadSegment::ResetSpeedGates(void)
RoadSegment::RoadSegment(int)
RoadSegment::SetBoundingRegion(VEC3 const&,VEC3 const&)
RoadSegment::SetDefaultLoiterOffset(float)
RoadSegment::SetDefaultStyleColor(uint)
RoadSegment::SetGatesReady(bool)
RoadSegment::SetRiderOffsetBlendDistance(float)
RoadSegment::SetRoadTextureLength(float)
RoadSegment::SetRoadTextureWidthScale(float)
RoadSegment::SetSplineType(RoadSegmentSplineType::Type)
RoadSegment::SetSportAllowOnRoad(ulong long,bool)
RoadSegment::SetTintColor(uint)
RoadSegment::ShouldDrawTransparentInNav(int)
RoadSegment::SnapMarkersToTesselation(void)
RoadSegment::TryCastToRoadMarker(Entity *)
RoadSegment::TryCastToRoadNode(Entity *)
RoadSegment::Update(float)
RoadSegment::UpdateCyclistWheelAltitudesAtRoadTime(VEC3 &,double,VEC3 &,double,bool)
RoadSegment::~RoadSegment()
RoadSegmentPlaceholder::GetSportAllowed(void)
RoadSegmentPlaceholder::IsAvailable(void)
RoadSegmentPlaceholder::IsPaddock(void)
RoadSegmentPlaceholder::IsSportAllowOnRoad(ulong long)
RoadSegmentPlaceholder::RoadSegmentPlaceholder(int)
RoadSegmentPlaceholder::~RoadSegmentPlaceholder()
RoadSegmentSpline::CalcPosByShortDistWithOffset(double,double,double,double,VEC3 *)
RoadSegmentSpline::CalculateRoadPositionAtTimeF(float,bool)
RoadSegmentSpline::CalculateRoadPositionByDist(double,double,VEC3 *)
RoadSegmentSpline::CalculateSplineDistanceUsingRoadPoints(double,int,int)
RoadSegmentSpline::CalculateSplinePoints(float,float,float,float)
RoadSegmentSpline::FindClosestPointOnRoad(VEC3 const&,double,int)
RoadSegmentSpline::FindClosestPointOnRoad2D(VEC3,float,int)
RoadSegmentSpline::FindClosestPointOnRoadF(VEC3 const&,float,int)
RoadSegmentSpline::GetCourseDistanceAtSplineTime(double,double *)
RoadSegmentSpline::GetCourseDistanceBetweenSplineTimes(double,double,bool,double *)
RoadSegmentSpline::GetCourseHeightAtDistance(float)
RoadSegmentSpline::GetCourseLength(void)
RoadSegmentSpline::GetCurvePointCount(void)
RoadSegmentSpline::GetCurvePointPositionAt(int)
RoadSegmentSpline::GetCurvePointPositionAt(int,bool)
RoadSegmentSpline::GetGlobalNodeVisualOffset(void)
RoadSegmentSpline::GetMaxAltitude(void)
RoadSegmentSpline::GetMaxExtents(void)
RoadSegmentSpline::GetMaxGradient(void)
RoadSegmentSpline::GetMetersClimbed(void)
RoadSegmentSpline::GetMinAltitude(void)
RoadSegmentSpline::GetMinExtents(void)
RoadSegmentSpline::GetRoadId(void)
RoadSegmentSpline::GetRoadNodeAt(int)
RoadSegmentSpline::GetRoadPointLinearDistanceAt(int)
RoadSegmentSpline::GetRoadSamplePoints(void)
RoadSegmentSpline::GetRoadWidth(double,bool,float *,float *,RoadMarkerEntity const**)
RoadSegmentSpline::GetSplineTimeAtCourseDistance(float)
RoadSegmentSpline::GetType(void)
RoadSegmentSpline::GetVisualOffsetAt(int)
RoadSegmentSpline::IsCurvePointStraight(int)
RoadSegmentSpline::IsInsideExtents(VEC3)
RoadSegmentSpline::IsInsideExtents(float,float)
RoadSegmentSpline::IsLooped(void)
RoadSegmentSpline::RoadSegmentSpline(RoadSegmentSplineType::Type)
RoadSegmentSpline::SetMaxExtents(VEC3 const&)
RoadSegmentSpline::SetMinExtents(VEC3 const&)
RoadSegmentSpline::~RoadSegmentSpline()
RoadSegmentSplineType::Iterator::Iterator(RoadSegmentSplineType::Type)
RoadSegmentSplineType::Iterator::begin(void)
RoadSegmentSplineType::Iterator::end(void)
RoadSegmentSplineType::Iterator::operator*(void)
RoadSegmentSplineType::Iterator::operator++(int)
RoadSegmentSplineType::Iterator::operator++(void)
RoadSegmentSplineType::fromIndex(int)
RoadSegmentSplineType::indexOf(RoadSegmentSplineType::Type)
RoadSegmentSplineType::isValid(RoadSegmentSplineType::Type)
RoadSegmentSplineType::next(RoadSegmentSplineType::Type)
RoadSegmentSplineType::parse(char const*)
RoadSegmentSplineType::toString(RoadSegmentSplineType::Type)
RoadSegmentSpline_Bezier::CalculateAutoTangent_In(int,int,int,bool)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_In(int,bool,int,VEC3 &)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_In_First(bool)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_In_Last(int,bool)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_Out(int,bool,int,VEC3 &)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_Out_First(bool)
RoadSegmentSpline_Bezier::CalculateAutoTangent_NonLooped_Out_Last(int,bool)
RoadSegmentSpline_Bezier::CalculateAutoTangent_Out(int,int,int,bool)
RoadSegmentSpline_Bezier::CalculateRoadPositionAtTime(double,bool)
RoadSegmentSpline_Bezier::CalculateRoadPositionAtTime_Looped(double,bool)
RoadSegmentSpline_Bezier::CalculateRoadPositionAtTime_NonLooped(double,bool)
RoadSegmentSpline_Bezier::CalculateRoadPositionAtTime_NonLooped_AfterLast(uint,double,bool)
RoadSegmentSpline_Bezier::CalculateRoadPositionAtTime_NonLooped_BeforeFirst(double,bool)
RoadSegmentSpline_Bezier::GetCurveTangentInAt(int,int,int,bool)
RoadSegmentSpline_Bezier::GetCurveTangentInAt_NonLooped(int,bool)
RoadSegmentSpline_Bezier::GetCurveTangentOutAt(int,int,int,bool)
RoadSegmentSpline_Bezier::GetCurveTangentOutAt_NonLooped(int,bool)
RoadSegmentSpline_Bezier::RoadSegmentSpline_Bezier(void)
RoadSegmentSpline_Bezier::~RoadSegmentSpline_Bezier()
RoadSegmentSpline_CatmullRom::CalculateRoadPositionAtTime(double,bool)
RoadSegmentSpline_CatmullRom::RoadSegmentSpline_CatmullRom(void)
RoadSegmentSpline_CatmullRom::~RoadSegmentSpline_CatmullRom()
RoadSegmentStyle::RoadSegmentStyle(RoadSegmentStyle const&)
RoadSegmentWorld::ActivateRoadTexture(int)
RoadSegmentWorld::AddCorner(RoadCornerEntity *)
RoadSegmentWorld::AddMarkers(Entity *,int *)
RoadSegmentWorld::AddPOI(POIEntity *)
RoadSegmentWorld::AddSpeedGate(SpeedGateEntity *)
RoadSegmentWorld::AllowFullWidthSteering(void)
RoadSegmentWorld::CalcPosByShortDistWithOffset(double,double,double,double,VEC3 *)
RoadSegmentWorld::CalculateRoadPositionAtTime(double,bool)
RoadSegmentWorld::CalculateRoadPositionAtTimeF(float,bool)
RoadSegmentWorld::CalculateSplinePoints(void)
RoadSegmentWorld::CheckForPOI(float)
RoadSegmentWorld::CheckForSpeedGates(float,float,bool)
RoadSegmentWorld::ClearRoadCorners(void)
RoadSegmentWorld::ConvertDistanceToRoadTime(float)
RoadSegmentWorld::ConvertRoadTimeToDistance(double)
RoadSegmentWorld::CreateRoadSegmentSpline(void)
RoadSegmentWorld::FindClosestPointOnRoad(VEC3 const&,double,int)
RoadSegmentWorld::FindClosestPointOnRoad2D(VEC3,float,int)
RoadSegmentWorld::FindClosestPointOnRoadF(VEC3 const&,float,int)
RoadSegmentWorld::GenerateNavRoadMesh(void)
RoadSegmentWorld::GenerateRoadMesh(void)
RoadSegmentWorld::GetAbsoluteSplineTimeOffsetFromAtoB(double,double,bool)
RoadSegmentWorld::GetAllRoadMarkersBasedOnRoadTime(double,std::vector<RoadMarkerEntity const*> *)
RoadSegmentWorld::GetCenterRightRatio(void)
RoadSegmentWorld::GetClosestForwardIntersectionMarkerToRoadTime(double,bool,uint *)
RoadSegmentWorld::GetClosestForwardIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
RoadSegmentWorld::GetClosestIntersectionMarkerToRoadTime(double,uint *)
RoadSegmentWorld::GetClosestIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
RoadSegmentWorld::GetClosestRoadMarkerBasedOnRoadTime(double,uint *)
RoadSegmentWorld::GetCourseDistanceAtSplineTime(double,double *)
RoadSegmentWorld::GetCourseDistanceBetweenSplineTimes(double,double,bool,double *)
RoadSegmentWorld::GetCourseHeightAtDistance(float)
RoadSegmentWorld::GetCourseLength(void)
RoadSegmentWorld::GetCurvePointCount(void)
RoadSegmentWorld::GetDefaultLoiterOffset(void)
RoadSegmentWorld::GetDefaultOffset(void)
RoadSegmentWorld::GetDefaultRoadStyleIndex(void)
RoadSegmentWorld::GetDefaultShoulderWidth(void)
RoadSegmentWorld::GetDefaultStyleColor(void)
RoadSegmentWorld::GetDefaultWidth(void)
RoadSegmentWorld::GetEdgeHalfWidth(double)
RoadSegmentWorld::GetFirstAndClosestRoadMarkersBasedOnRoadTime(double,RoadMarkerEntity *&,RoadMarkerEntity *&,bool)
RoadSegmentWorld::GetFirstNode(void)
RoadSegmentWorld::GetFirstRoadMarkerBasedOnRoadTime(double,bool)
RoadSegmentWorld::GetGlobalNodeVisualOffset(void)
RoadSegmentWorld::GetIntersectionMarkerBasedOnId(int)
RoadSegmentWorld::GetIntersectionMarkerBasedOnRoadTime(double)
RoadSegmentWorld::GetLastNode(void)
RoadSegmentWorld::GetLoiterHalfWidth(double)
RoadSegmentWorld::GetLoiterOffset(double)
RoadSegmentWorld::GetMarkerInfluence(double,RoadMarkerEntity const*)
RoadSegmentWorld::GetMaxAltitude(void)
RoadSegmentWorld::GetMaxExtents(void)
RoadSegmentWorld::GetMaxGradient(void)
RoadSegmentWorld::GetMaxInstersectionTime(bool,ulong long,uint)
RoadSegmentWorld::GetMetersClimbed(void)
RoadSegmentWorld::GetMinAltitude(void)
RoadSegmentWorld::GetMinExtents(void)
RoadSegmentWorld::GetMinimumTessellationDistance(void)
RoadSegmentWorld::GetNavDrawLayer(void)
RoadSegmentWorld::GetNavRoadVertIndex(double)
RoadSegmentWorld::GetNeighboringRoadNodes(RoadNode *,RoadNode **,RoadNode **)
RoadSegmentWorld::GetNodeBasedOnRoadTime(double)
RoadSegmentWorld::GetPaddockExitRoadTime(void)
RoadSegmentWorld::GetPhysicSlope(void)
RoadSegmentWorld::GetRiderBoundsRatio(void)
RoadSegmentWorld::GetRiderOffsetBlendDistance(void)
RoadSegmentWorld::GetRoadColor(double)
RoadSegmentWorld::GetRoadEdge(VEC3 const&,VEC3,double,float)
RoadSegmentWorld::GetRoadMarkers(void)
RoadSegmentWorld::GetRoadMarkersPtr(void)
RoadSegmentWorld::GetRoadNodeAt(int)
RoadSegmentWorld::GetRoadNodeCount(void)
RoadSegmentWorld::GetRoadNodesPtr(void)
RoadSegmentWorld::GetRoadOffset(double)
RoadSegmentWorld::GetRoadPointLinearDistanceAt(int)
RoadSegmentWorld::GetRoadSamplePoints(void)
RoadSegmentWorld::GetRoadTextureLength(void)
RoadSegmentWorld::GetRoadTextureWidthScale(void)
RoadSegmentWorld::GetRoadWidth(double,bool,float *,float *,RoadMarkerEntity const**)
RoadSegmentWorld::GetSecondLastNode(void)
RoadSegmentWorld::GetSecondNode(void)
RoadSegmentWorld::GetShoulderHalfWidth(double)
RoadSegmentWorld::GetSmallDistanceRoadTime(void)
RoadSegmentWorld::GetSpeedGates(void)
RoadSegmentWorld::GetSplineTimeAtCourseDistance(float)
RoadSegmentWorld::GetSplineType(void)
RoadSegmentWorld::GetSportAllowed(void)
RoadSegmentWorld::GetStyleIndex(double,uint &,uint *)
RoadSegmentWorld::GetTesselationCount(void)
RoadSegmentWorld::GetTintColor(void)
RoadSegmentWorld::IndexOfNode(RoadNode const*)
RoadSegmentWorld::IsAvailable(void)
RoadSegmentWorld::IsFirstNode(RoadNode const*)
RoadSegmentWorld::IsLastNode(RoadNode const*)
RoadSegmentWorld::IsLooped(void)
RoadSegmentWorld::IsOneWay(void)
RoadSegmentWorld::IsPaddock(void)
RoadSegmentWorld::IsPointInRoadRegion(VEC3 const&)
RoadSegmentWorld::IsPointInRoadRegion2D(VEC3 const&)
RoadSegmentWorld::IsPreviousNodeStraight(RoadNode const*)
RoadSegmentWorld::IsRightTraffic(void)
RoadSegmentWorld::IsRoadInvisible(double)
RoadSegmentWorld::IsSecondLastNode(RoadNode const*)
RoadSegmentWorld::IsSecondNode(RoadNode const*)
RoadSegmentWorld::IsSportAllowOnRoad(ulong long)
RoadSegmentWorld::Load(tinyxml2::XMLElement *)
RoadSegmentWorld::NavRender(VEC4 const&,double,double)
RoadSegmentWorld::NukeEmAll(void)
RoadSegmentWorld::PostInitialize(void)
RoadSegmentWorld::RecordRiderOffCourse(float,bool)
RoadSegmentWorld::Render(GFX_RenderPass)
RoadSegmentWorld::ResetSpeedGates(void)
RoadSegmentWorld::RoadSegmentWorld(int,char const*,bool,bool,bool,bool,bool,bool,bool,bool,float,float,float,float,float,float,float,float,float,int,bool,double,float,ulong long)
RoadSegmentWorld::SetBoundingRegion(VEC3 const&,VEC3 const&)
RoadSegmentWorld::SetDefaultLoiterOffset(float)
RoadSegmentWorld::SetDefaultStyleColor(uint)
RoadSegmentWorld::SetGatesReady(bool)
RoadSegmentWorld::SetRiderOffsetBlendDistance(float)
RoadSegmentWorld::SetRoadTextureLength(float)
RoadSegmentWorld::SetRoadTextureWidthScale(float)
RoadSegmentWorld::SetSplineType(RoadSegmentSplineType::Type)
RoadSegmentWorld::SetSplineType_Internal(RoadSegmentSplineType::Type)
RoadSegmentWorld::SetSportAllowOnRoad(ulong long,bool)
RoadSegmentWorld::SetTintColor(uint)
RoadSegmentWorld::ShouldDrawTransparentInNav(int)
RoadSegmentWorld::SnapMarkersToTesselation(void)
RoadSegmentWorld::Update(float)
RoadSegmentWorld::UpdateCyclistWheelAltitudesAtRoadTime(VEC3 &,double,VEC3 &,double,bool)
RoadSegmentWorld::~RoadSegmentWorld()*/
};
struct RoadSegmentWorld : public RoadSegment {
    double FindClosestPointOnRoad(const VEC3 &, double, int) override {
        //TODO
        return 0.0;
    }
    void CalculateRoadPositionByDist(double, double, VEC3 *dest) override {
        //TODO
    }
    float GetCyclistAltitudeAtRoadTime(const VEC3 &, double, bool) override {
        //TODO
        return 0.0f; 
    }
    bool IsPlaceholder() { return false; }
};
struct RoadManager {
    std::vector<RoadSegment *> m_segments;
    enum ERoadMeasureLocation { EML_0 = 0 };
    static void FindClosestPointOnRoad(const VEC3 &, int32_t, int32_t *, uint64_t, bool, int32_t/*, bool, ERoadMeasureLocation*/);
    RoadSegment *GetRoadSegment(int32_t id);

    /*RoadManager::AddFindPosNode(VEC3 const&,int,double,std::vector<RoadFindPosNode> &)
RoadManager::AdjustRoadDistance(float *,RoadSegment const*,double,RoadManager::ERoadMeasureLocation)
RoadManager::CheckToOverrideStyleIndex(int)
RoadManager::ClearRoadCorners(void)
RoadManager::ConstructNearbyRiderGroupsEmpty(void)
RoadManager::ConstructNearbyRiderGroupsLondon(void)
RoadManager::ConstructNearbyRiderGroupsNewYork(void)
RoadManager::ConstructNearbyRiderGroupsRichmond(void)
RoadManager::ConstructNearbyRiderGroupsWatopia(void)
RoadManager::Destroy(void)
RoadManager::FindAllPointsAheadInternal(RoadSegment const*,float,double,bool,std::vector<RoadFindPosNode> &,Route const*,ulong long,uint)
RoadManager::FindAllPointsAheadInternalAll(RoadSegment const*,float,double,bool,std::vector<RoadFindPosNode> &,ulong long,uint,uint)
RoadManager::FindAllPointsAheadInternalRoute(RoadSegment const*,float,double,bool,std::vector<RoadFindPosNode> &,Route const*,ulong long,uint,uint)
RoadManager::FindAllPointsAheadPos(VEC3 const&,float,bool,std::vector<RoadFindPosNode> &,Route const*,ulong long,uint)
RoadManager::FindAllPointsAheadRoadId(int,VEC3 const&,float,bool,std::vector<RoadFindPosNode> &,Route const*,ulong long,uint)
RoadManager::FindAllPointsAheadRoadTime(int,double,float,bool,std::vector<RoadFindPosNode> &,Route const*,ulong long,uint)
RoadManager::FindClosestPointOnRoadF(VEC3,int,int *,ulong long,bool,int,bool,RoadManager::ERoadMeasureLocation)
RoadManager::FindClosestPointOnRoadF2D(VEC3,int,int *,ulong long,bool,int,bool,RoadManager::ERoadMeasureLocation)
RoadManager::GetClosestIntersectionOnRoad(RoadSegment *,double,IntersectionMarkerEntity **,IntersectionMarkerEntity **,IntersectionMarkerEntity **)
RoadManager::GetInst(void)
RoadManager::GetPhysicalRoadCount(void)
RoadManager::GetRoad(int)
RoadManager::GetRoadCount(void)
RoadManager::GetRoadName(int)
RoadManager::GetRoadSegment(VEC3)
RoadManager::GetRoadSegmentStyle(int)
RoadManager::InitializeRoadCorners(void)
RoadManager::IsPositionOnRoad(VEC3 const&,double &)
RoadManager::IsPositionOnRoad(int,VEC3 const&,double &)
RoadManager::IsRiderInRoadGroup(BikeEntity *,BikeEntity *)
RoadManager::IsRiderNearby(BikeEntity *,BikeEntity *)
RoadManager::IsRoadAVailableInWorld(int,int)
RoadManager::IsRoadAvailable(RoadSegment *)
RoadManager::IsRoadAvailable(int)
RoadManager::LayRoad(bool const*)
RoadManager::Load(XMLDoc *,XMLDoc *)
RoadManager::MapAudioRoadTypeToString(WWISE_ROADTYPES)
RoadManager::MapStringToAudioRoadType(char const*)
RoadManager::MapStyleIndexToString(int)
RoadManager::MapStyleStringToIndex(char const*)
RoadManager::PostInitialize(void)
RoadManager::PrintCornerStats(void)
RoadManager::Render(void)
RoadManager::ResetRoadCorners(void)
RoadManager::RoadManager(void)
RoadManager::RoughDistanceFromRoad(VEC3,bool,RoadManager::ERoadMeasureLocation)
RoadManager::RoughDistanceFromRoad2D(VEC3,bool,RoadManager::ERoadMeasureLocation)
RoadManager::UnitTest(void)
RoadManager::Update(float)
RoadManager::~RoadManager()*/
};
inline RoadManager *g_pRoadManager;
struct Route {
    //TODO
    uint32_t m_hash = 0;
    float m_field_1BC = 0.0f;
};
struct RouteManager {
    Route *GetRoute(uint32_t hash) {
        //TODO
        return nullptr;
    }
    static inline RouteManager *g_strDefault;
    static RouteManager *Instance() {
        if (!g_strDefault)
            g_strDefault = new RouteManager();
        return g_strDefault;
    }
    void FindRoutesByRoadInfo(int segmentId, double not_used, bool, std::vector<Route *> *ret);
    /*RouteManager::CurateRouteCheckpoints(void)
    RouteManager::GetCheckPoints(uint)
    RouteManager::GetDecisions(uint)
    RouteManager::GetInst(void)
    RouteManager::GetName(uint)
    RouteManager::GetRoute(char const*)
    RouteManager::LoadRoute(char const*,int)
    RouteManager::LoadRoutesForWorld(RouteComputer *,int,bool)
    RouteManager::MeasureCpDistanceIntoRouteInMeters(Route *,float *,float *,float *,float *)
    RouteManager::ParseCheckpoints(tinyxml2::XMLElement *,Route const*,std::vector<RouteCheckpoint> *,bool &)
    RouteManager::RouteManager(void)*/
};
struct RouteComputer {
    Route *m_selRoute = nullptr;
    int m_field_10 = 0, m_decisionIndex = 0;
    void SetRoute(Route *, bool, bool, const std::string &) {
        //TODO
    }
    void SetDecisionStateToOffroute() {
        //TODO
    }
    static void FlipRoute(BikeEntity *be);
    /*RouteComputer::CheckRouteLapProgress(void)
RouteComputer::DestroyDynamicArches(void)
RouteComputer::EstimateHCPPosTimeForward(float,float,uint *)
RouteComputer::FilloutRouteRecordData(RouteFinishData &)
RouteComputer::FindFutureRoadBasedOnRoute(int &,int,int,double,bool,VirtualBikeComputer::ZSPORT,int &,bool &,double &,IntersectionMarkerEntity **)
RouteComputer::FindNextDecisionForGivenRoad(int &,int,VirtualBikeComputer::ZSPORT)
RouteComputer::FixLoopingRouteHRC(void)
RouteComputer::GetClosestHCheckpoint(VEC3 const&,bool)
RouteComputer::GetClosestHCheckpointTime(VEC3 const&,bool)
RouteComputer::GetClosestHCheckpointToHCheckpoint(uint,bool)
RouteComputer::GetCompletionPct(bool,int)
RouteComputer::GetCurrentDecision(VirtualBikeComputer::ZSPORT)
RouteComputer::GetDecisionAt(VirtualBikeComputer::ZSPORT,int)
RouteComputer::GetEventBranchDecision(int,VirtualBikeComputer::ZSPORT,Route const*)
RouteComputer::GetLeadInPct(int)
RouteComputer::GetNextHRCOnRoad(uint)
RouteComputer::GetPosAtCheckpointTime(float)
RouteComputer::GetSelectedRoute(void)
RouteComputer::GetSelectedRouteHash(void)
RouteComputer::GetTotalDistanceOfCurrentRoute(int const&)
RouteComputer::HitCheckpointCount(void)
RouteComputer::InitialiseRouteProgress(void)
RouteComputer::IsOnLeadin(void)
RouteComputer::IsRoutePerfectLoop(void)
RouteComputer::OnCompletedRoute(Route *)
RouteComputer::OnValidRoute(void)
RouteComputer::ProjectAlongRoute(VEC3,float,bool,bool *,double *,int *)
RouteComputer::Reset(void)
RouteComputer::ResetCheckpoints(void)
RouteComputer::ResetRoutePlayerTrackers(void)
RouteComputer::RetrieveNextDecision(Route const*,int &,int &,bool &)
RouteComputer::RouteComputer(BikeEntity *,int)
RouteComputer::SetRouteProgressTimeout(float)
RouteComputer::SetValidRouteProgress(bool)
RouteComputer::ShowRouteProgress(void)
RouteComputer::ShowingRouteCompleted(void)
RouteComputer::SpawnDynamicArch(int,double,ArchAsset const&)
RouteComputer::Update(float)
RouteComputer::UpdateCheckpointState(void)
RouteComputer::UpdateDecisionState(VirtualBikeComputer::ZSPORT)
RouteComputer::UpdateRouteProgressTimeout(float)
RouteComputer::~RouteComputer()*/
};
