#pragma once
struct Accessory {
    enum Type { ACT_JERSEY = 3, ACT_CLOTHE_4 = 4, ACT_CLOTHE_5 = 5, ACT_SHOES = 7, ACT_SOCKS = 8, ACT_GLOVES = 9, ACT_TANKTOP = 17 };
    /*Accessory::Accessory(Accessory::Type,Category,char const*,char const*,char const*,char const*,Gender,char const*,bool,bool,char const*)
Accessory::GenerateHeadTypeHashID(void)
Accessory::GetHolidayHandle(void)
Accessory::GetHolidayInstanceHandle(void)
Accessory::GetHolidayTextureHandle(void)
Accessory::GetInstancedMeshHandle(void)
Accessory::GetMeshHandle(void)
Accessory::GetName(void)
Accessory::GetNormalTextureHandle(bool)
Accessory::GetPrice(void)
Accessory::GetTextureHandle(void)
Accessory::GetThumbnailAlphaTextureHandle(void)
Accessory::GetThumbnailTextureHandle(void)
Accessory::GetUnlockLevel(VirtualBikeComputer::ZSPORT)
Accessory::Initialize(Accessory::Type,Category,char const*,char const*,char const*,Gender,char const*,bool,bool,char const*)
Accessory::IsAccessoryExcludedByMe(Accessory::Type)
Accessory::IsMatchingGender(bool)
Accessory::IsMatchingSport(VirtualBikeComputer::ZSPORT)
Accessory::LoadColorScheme(char const*,XMLDoc &,std::vector<ColorScheme *> &)
Accessory::LoadFromXML(char const*,char const*)
Accessory::LoadSegmentJersey(char const*)
Accessory::Selected(void)
Accessory::SetBehaviorFlag(Accessory::Flags,bool)
Accessory::SetColorScheme(int)
Accessory::SetUnlockLevel(int,VirtualBikeComputer::ZSPORT)
Accessory::~Accessory()*/
};
struct AccessoryConfig { /* ::AccessoryConfig(void)
    AccessoryConfig::ClearAccessories(void)
    AccessoryConfig::FillAccessoryConfig(zwift::protobuf::PlayerProfile const &)
    AccessoryConfig::Get(Accessory::Type, bool)
    AccessoryConfig::Set(Accessory const *, bool)
    AccessoryConfig::operator[](uint)
    AccessoryConfig::~AccessoryConfig()*/
};
struct AccessoryManager {
public:
    static void InitAllAccessories();
    static void CreateSegmentJerseys();
    /*AccessoryManager::AddAccessory(Accessory *,char const*,char const*,char const*)
AccessoryManager::ConvertLegacyHashID(zwift::protobuf::PlayerProfile *)
AccessoryManager::CreateSegmentJerseys(void)
AccessoryManager::DeleteWads(void)
AccessoryManager::DestroyAll(void)
AccessoryManager::DoesAccessoryTypeHaveManufactureName(Accessory::Type)
AccessoryManager::DoneThreadedLoading(int,JobData *)
AccessoryManager::EnsureAccessoriesEquipped(bool,AccessoryConfig *,zwift::protobuf::PlayerProfile *)
AccessoryManager::EnsureBikeComponentsEquipped(BikePresetConfig const**,BikeWheelConfig *,zwift::protobuf::PlayerProfile *)
AccessoryManager::GetAccessoriesByType(Accessory::Type,bool (*)(Accessory const*,Accessory const*),bool)
AccessoryManager::GetAccessoriesOfSameGroup(uint,Accessory::Type,std::vector<Accessory*> *,SaveGame *)
AccessoryManager::GetAccessoryByHash(uint,Accessory::Type)
AccessoryManager::GetAccessoryByTypeAndMakeName(Accessory::Type,char const*,char const*)
AccessoryManager::GetAccessoryByTypeAndMasterSetHash(Accessory::Type,uint)
AccessoryManager::GetAccessoryByTypeWithColorSchemeHash(Accessory::Type,uint,int *)
AccessoryManager::GetAccessoryByTypeWithHash(Accessory::Type,uint,int *)
AccessoryManager::GetAccessoryCount(Accessory::Type,bool,bool)
AccessoryManager::GetAccessoryPointerByHash(uint,Accessory::Type)
AccessoryManager::GetDefaultAccessory(Accessory::Type,bool)
AccessoryManager::GetDefaultAccessoryConfigPtr(void)
AccessoryManager::GetDefaultAccessoryFromSameItemGroup(Accessory::Type,uint)
AccessoryManager::GetDefaultNormalTexture(Accessory::Type,Gender)
AccessoryManager::GetDefaultPresetBikeFrame(void)
AccessoryManager::GetDefaultPresetHandCycleFrame(void)
AccessoryManager::GetDefaultPresetMTBFrame(void)
AccessoryManager::GetDefaultPresetTTFrame(void)
AccessoryManager::GetDefaultWheelConfigPtr(void)
AccessoryManager::GetFirstAccessoryOfSameGroup(uint,Accessory::Type,SaveGame *)
AccessoryManager::GetManaufactureMaps(void)
AccessoryManager::GetManufactureNameByHash(uint)
AccessoryManager::GetManufactureNames(std::vector<char const*> *)
AccessoryManager::GetNewAccessoriesCount(SaveGame *,Accessory::Type,uint)
AccessoryManager::GetNewBikeCount(SaveGame *,uint)
AccessoryManager::GetPairedAccessories(Accessory const*,std::vector<Accessory*> *,SaveGame *)
AccessoryManager::GetPairingHashes(uint)
AccessoryManager::GetPlayerSelectedAccessory(Accessory::Type,bool)
AccessoryManager::GetPresetBikeConfiguration(uint,bool)
AccessoryManager::GetPresetBikeConfigurations(bool (*)(BikePresetConfig const*,BikePresetConfig const*),bool)
AccessoryManager::InitAccessories(void)
AccessoryManager::InitAllAccessories(void)
AccessoryManager::InitBikeComponents(void)
AccessoryManager::InitPresetBikeConfigs(void)
AccessoryManager::IsAccessoryMatchingFrameItemGroup(Accessory const*,BikePresetConfig const*)
AccessoryManager::IsAccessoryUnlockedBySport(Accessory const*,VirtualBikeComputer::ZSPORT)
AccessoryManager::IsReady(void)
AccessoryManager::LoadWads(void)
AccessoryManager::OverrideAccessoryTextures(uint,Accessory::Type,std::string,std::string,std::string)
AccessoryManager::ParsetPresetBikeConfigs(char const*)
AccessoryManager::PlayerProfileItemGetter(Accessory::Type)
AccessoryManager::PlayerProfileItemSetter(Accessory::Type,uint)
AccessoryManager::SetDefaultAccessories(void)
AccessoryManager::SetDefaultBikeWheels(void)
AccessoryManager::SetPlayerSelectedAccessory(Accessory *)
AccessoryManager::SortByAccessoryMakeModelAscending(Accessory const*,Accessory const*)
AccessoryManager::SortByAccessoryMakeModelDescending(Accessory const*,Accessory const*)
AccessoryManager::SortByAccessoryUnSeen(Accessory const*,Accessory const*)
AccessoryManager::SortByBikeConfigMakeModelAscending(BikePresetConfig const*,BikePresetConfig const*)
AccessoryManager::SortByBikeConfigMakeModelDescending(BikePresetConfig const*,BikePresetConfig const*)
AccessoryManager::SortByBikeConfigUnSeen(BikePresetConfig const*,BikePresetConfig const*)
AccessoryManager::SortByUnlockLevel(Accessory const*,Accessory const*)
AccessoryManager::SortFemaleFirst(Accessory const*,Accessory const*)
AccessoryManager::SortMaleFirst(Accessory const*,Accessory const*)
AccessoryManager::StartThreadedLoading(JobData *)
AccessoryManager::TranslateAccessoryTypeStrToValue(char const*)
AccessoryManager::TranslateLegacyHashID(uint)
AccessoryManager::TranslateLegacyRunningShortsHashID(uint)
AccessoryManager::UpdateManufacturesDictionary(uint,char const*,uint,Accessory::Type)*/
};