//UT Coverage: 100%, 5/5 READY for testing
#pragma once
struct XMLDoc { //1736 bytes
    tinyxml2::XMLDocument m_tiny_doc;
    std::string m_root_name;
    std::map<uint32_t, tinyxml2::XMLElement *> m_map;
    char *m_wadCopy = nullptr;
    int m_version = 0;
    char m_path[MAX_PATH] = {};
    bool m_loadResult = false;
    XMLDoc();
    ~XMLDoc();
    void AddCStr(const char *, const char *);
    void AddString(const char *, const std::string &);
    void AddU32(const char *, uint32_t);
    void AddVEC3(const char *, const VEC3 &);
    void AddVEC4(const char *, const VEC4 &);
    bool BufferLoad(const void *, uint32_t);
    void ClearPath(const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, VEC3 *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, bool *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, float *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, int *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, std::string *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, std::vector<int> *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, std::vector<std::string> *, const char *);
    void CopyXmlToParameter(const tinyxml2::XMLElement *, uint32_t *, const char *);
    tinyxml2::XMLElement *CreateElement(tinyxml2::XMLNode *, const std::vector<std::string> &path);
    tinyxml2::XMLElement *CreateNewElement(tinyxml2::XMLNode *, const std::vector<std::string> &, bool);
    tinyxml2::XMLElement *FindElement(const char *path, bool enableCreate);
    tinyxml2::XMLElement *FindFirstElement(tinyxml2::XMLNode *, int, const std::vector<std::string> &path);
    tinyxml2::XMLElement *FindFirstElement(tinyxml2::XMLNode *, const char *, bool, bool);
    tinyxml2::XMLElement *FindNextElement(const char *path, bool b1, bool enableCreate);
    tinyxml2::XMLElement *FindNextMatchingElement(tinyxml2::XMLNode *from, int pidx, const std::vector<std::string> &path, bool goDown);
    bool GetBool(const char *path, bool def, bool a4);
    const char *GetCStr(const char *, const char *, bool);
    float GetF32(const char *, float, bool);
    float *GetF32Array(const char *, bool);
    std::vector<float> GetF32Vector(const char *, bool);
    int GetS32(const char *, int, bool);
    std::vector<std::string> GetStringArray(const char *, bool);
    //not found @PC bool GetTag(const char *, bool);
    tinyxml2::XMLElement *GetElt(const char *ename, bool distinctMode, bool enableCreate);
    uint32_t GetU32(const char *, uint32_t);
    //VEC3 GetVEC3(const char *, const VEC3 &, bool);
    static void GetVEC3Array(tinyxml2::XMLElement *el, const char *chNameFormat, std::vector<VEC3> *pRet);
    static void GetVEC2(tinyxml2::XMLElement *el, VEC2 *pRet, const VEC2 &def = VEC2{});
    static void GetVEC3(tinyxml2::XMLElement *el, VEC3 *pRet, const VEC3 &def = VEC3{});
    static void GetVEC4(const tinyxml2::XMLAttribute *at, VEC4 *pRet, const VEC4 &def = VEC4{}, const char *fmt = "%f,%f,%f,%f");
    //VEC4 GetVEC4(const char *, const VEC4 &, bool);
    //VEC4 *GetVEC4Array(const char *, bool);
    bool Internal_Load(const char *, long *);
    bool Internal_Load(uint32_t, void *);
    bool Load(const char *aName, time_t *aTime);
    tinyxml2::XMLError LoadCompressedXML(const std::string &, tinyxml2::XMLDocument &);
    int Save();
    int SaveAs(const char *, bool);
    void SetBool(const char *path, bool val);
    void SetCStr(const char *path, const char *text);
    void SetF32(const char *, float);
    void SetF32Array(const char *, int, const float *);
    void SetF32Vector(const char *, const std::vector<float> &);
    void SetS32(const char *, int);
    void SetU32(const char *, uint32_t);
    void SetVEC2(const char *, const VEC2 &);
    void SetVEC2(tinyxml2::XMLElement *, const VEC2 &);
    void SetVEC3(const char *, const VEC3 &);
    void SetVEC3(tinyxml2::XMLElement *, const VEC3 &);
    void SetVEC4(const char *, const VEC4 &);
    void SetVEC4(tinyxml2::XMLElement *, const VEC4 &);
    bool UserLoad(const char *);
    int UserSaveAs(const char *, bool);
};

inline XMLDoc g_UserConfigDoc;