syntax = "proto2";
option optimize_for = LITE_RUNTIME; //as in original PC build
package protobuf;
import "Social.proto";
import "Mapping.proto";
import "Workout.proto";
import "Event.proto";
import "Profile.proto";
import "PlayerState.proto";
enum BLEPeripheralRequestType {
    BEGIN_PERIPHERAL_DISCOVERY = 1;
    CONNECT_PERIPHERAL = 3;
    DISCONNECT_PERIPHERAL = 4;
    ENABLE_BLE = 6;
    END_PERIPHERAL_DISCOVERY = 2;
    READ_CHARACTERISTIC_VALUE = 7;
    UNKNOWN_REQUEST_TYPE = 0;
    WRITE_CHARACTERISTIC_VALUE = 5;
}
enum PeripheralResponseType {
    CHARACTERISTIC_VALUE = 2;
    PERIPHERAL_CONNECTED = 3;
    PERIPHERAL_DISCONNECTED = 4;
    PERIPHERAL_DISCOVERED = 5;
    PERIPHERAL_ERROR = 1;
    UNKNOWN_RESPONSE_TYPE = 0;
}
enum PeripheralErrorType {
    BLE_POWERED_OFF = 3;
    BLE_UNSUPPORTED = 2;
    PERMISSION_DENIED = 1;
    UNKNOWN_ERROR = 0;
}
enum BLEAdvertisement_Type {
    CONNECTABLE_DIRECTED = 1;
    CONNECTABLE_UNDIRECTED = 0;
    EXTENDED = 5;
    NON_CONNECTABLE_UNDIRECTED = 3;
    SCANNABLE_UNDIRECTED = 2;
    SCAN_RESPONSE = 4;
}
enum BLEAdvertisement_Flags {
    ClassicNotSupported = 4;
    DualModeControllerCapable = 8;
    DualModeHostCapable = 16;
    GeneralDiscoverableMode = 2;
    LimitedDiscoverableMode = 1;
    None = 0;
}
enum PreferencesBitmaskFields {
    APPROVAL_REQUIRED = 1;
    DEFAULT_FITNESS_DATA_PRIVACY = 16;
    DISPLAY_AGE = 64;
    DISPLAY_WEIGHT = 4;
    MINOR = 2;
    PRIVATE_MESSAGING = 8;
    SUPPRESS_FOLLOWER_NOTIFICATION = 32;
}
enum LanExerciseDeviceType {
    LAN_EXERCISE_DEVICE_TYPE_UNKNOWN = -1;
    LAN_EXERCISE_DEVICE_TYPE_ZWIFT = 0;
    LAN_EXERCISE_DEVICE_TYPE_WAHOO = 1;
}
enum BLEAdvertisementDataSection_Type {
    ADVERTISING_INTERVAL = 26;
    DEVICE_ID = 16;
    FLAGS = 1;
    INCOMPLETE_UUIDS_128_BIT = 6;
    INCOMPLETE_UUIDS_16_BIT = 2;
    INCOMPLETE_UUIDS_32_BIT = 4;
    INDOOR_POSITIONING = 37;
    INFORMATION_DATA_3D = 61;
    LE_BLUETOOTH_DEVICE_ADDRESS = 27;
    LE_ROLE = 28;
    LE_SECURE_CONFIRMATION_VALUE = 34;
    APPEARANCE = 25;
    LE_SECURE_RANDOM_VALUE = 35;
    LE_SUPPORTED_FEATURES = 39;
    MANUFACTURER_DATA = 255;
    MESH_BEACON = 43;
    MESH_MESSAGE = 42;
    PB_ADV = 41;
    PUBLIC_TARGET_ADDRESS = 23;
    RANDOM_TARGET_ADDRESS = 24;
    SECURITY_MANAGER_OOB_FLAGS = 17;
    SERVICE_DATA_128_BIT = 33;
    BIG_INFO = 44;
    SERVICE_DATA_16_BIT = 22;
    SERVICE_DATA_32_BIT = 32;
    SHORTENED_LOCAL_NAME = 8;
    SIMPLE_PAIRING_HASH = 14;
    SIMPLE_PAIRING_HASH_C256 = 29;
    SIMPLE_PAIRING_RANDOMIZER = 15;
    SIMPLE_PAIRING_RANDOMIZER_R256 = 30;
    SLAVE_CONNECTION_INTERVAL = 18;
    SOLICITATION_UUIDS_128_BIT = 21;
    SOLICITATION_UUIDS_16_BIT = 20;
    BROADCAST_CODE = 45;
    SOLICITATION_UUIDS_32_BIT = 31;
    TRANSPORT_DISCOVERY_DATA = 38;
    TX_POWER_LEVEL = 10;
    DST_UNKNOWN = 0;
    URI = 36;
    CHANNEL_MAP_UPDATE_INDICATION = 40;
    CLASS_OF_DEVICE = 13;
    COMPLETE_LOCAL_NAME = 9;
    COMPLETE_UUIDS_128_BIT = 7;
    COMPLETE_UUIDS_16_BIT = 3;
    COMPLETE_UUIDS_32_BIT = 5;
}
enum ButtonIcon {
    ICON_BELL = 4;
    ICON_ELBOW_FLICK = 1;
    ICON_HAMMER_TIME = 5;
    ICON_NICE = 7;
    ICON_RIDE_ON = 3;
    ICON_SNAPSHOT = 9;
    ICON_SWITCH_VIEW = 8;
    ICON_TOAST = 6;
    ICON_WAVE = 2;
}
enum GameAction_Type {
    DISMISS_EXIT_GAME = 3;
    DISMISS_SAVE_ACTIVITY = 1;
    PROMPT_EXIT_GAME = 4;
    PROMPT_SAVE_ACTIVITY = 2;
}
enum GamePacket_Type {
    BOOST_MODE_STATE = 22;
    PLAYER_FITNESS_INFO = 13;
    PLAYER_INFO = 7;
    PLAYER_STOPWATCH_SEGMENT = 21;
    RIDE_ON_BOMB_REQUEST = 8;
    RIDE_ON_BOMB_RESPONSE = 9;
    SEGMENT_RESULT_ADD = 17;
    SEGMENT_RESULT_NEW_LEADER = 19;
    SEGMENT_RESULT_REMOVE = 18;
    SPORTS_DATA_REQUEST = 1;
    SPORTS_DATA_RESPONSE = 2;
    CLIENT_ACTION = 15;
    WORKOUT_ACTION_REQUEST = 14;
    WORKOUT_INFO = 11;
    WORKOUT_STATE = 12;
    CLIENT_INFO = 4;
    EFFECT_REQUEST = 10;
    GAME_ACTION = 23;
    GAME_SESSION_INFO = 3;
    INTERSECTION_AHEAD = 6;
    MAPPING_DATA = 5;
    MEETUP_STATE = 16;
    PLAYER_ACTIVE_SEGMENTS = 20;
}
enum GameSessionInfo_GameMode {
    GM_EVENT = 3;
    GM_MEETUP = 4;
    GM_NORMAL = 1;
    GM_WORKOUT = 2;
}
enum GameSessionInfo_GameScreenInFocus {
    BUSY = 5;
    DROP_IN = 2;
    IN_GAME = 3;
    OTHER = 4;
    PAIRING = 1;
}
enum SportsDataRequest_Type {
    END_SELECTION = 6;
    SELECT_SAMPLE_TYPE = 3;
    SET_SPORT = 2;
    START_SELECTION = 1;
    UNSELECT_ALL_SAMPLE_TYPES = 5;
    UNSELECT_SAMPLE_TYPE = 4;
}
enum SportsDataResponse_ConnectionStatus {
    CONNECTED = 1;
    DISCONNECTED = 2;
    NOT_AVAILABLE = 3;
}
enum SportsDataResponse_DeviceModel {
    APPLE_WATCH = 2;
    DM_UNKNOWN = 1;
}
enum SportsDataResponse_Type {
    ACTIVE_SAMPLE_TYPES = 4;
    AVAILABLE_SAMPLE_TYPES = 2;
    CURRENT_SPORT = 6;
    DEVICE_MODEL = 1;
    SAMPLE = 5;
    SELECTED_SAMPLE_TYPES = 3;
}
enum SportsDataResponse_WorkoutStatus {
    IN_WORKOUT = 1;
    NOT_IN_WORKOUT = 2;
}
enum SportsDataSample_Type {
    HEART_RATE = 1;
    WALK_RUN_SPEED = 2;
}
enum PhoneToGameCommandType {
    ACTIVATE_POWER_UP = 21;
    ELBOW_FLICK = 4;
    FAN_VIEW = 24;
    HAMMER_TIME = 8;
    JOIN_ANOTHER_PLAYER = 2;
    MOBILE_ALERT_RESPONSE = 26;
    MOBILE_API_VERSION = 20;
    NICE = 10;
    OBSOLETE_GROUP_TEXT_MESSAGE = 18;
    OBSOLETE_SINGLE_PLAYER_TEXT_MESSAGE = 19;
    PAIRING_AS = 28;
    BELL = 7;
    PHONE_TO_GAME_PACKET = 29;
    PHONE_TO_GAME_UNKNOWN_COMMAND = 0;
    REQUEST_FOR_PROFILE = 16;
    RIDE_ON = 6;
    SAVE_ACTIVITY = 13;
    SOCIAL_PLAYER_ACTION = 25;
    TAKE_SCREENSHOT = 17;
    TELEPORT_TO_START = 3;
    TOAST = 9;
    U_TURN = 23;
    BLEPERIPHERAL_DISCOVERY = 30;
    WAVE = 5;
    BLEPERIPHERAL_RESPONSE = 27;
    BRING_IT = 11;
    CANCEL_DONE_RIDING = 15;
    CHANGE_CAMERA_ANGLE = 1;
    CUSTOM_ACTION = 22;
    DISCARD_ACTIVITY = 12;
    DONE_RIDING = 14;
}
enum GameToPhoneCommandType {
    GAME_TO_PHONE_ACTIVATE_POWER_UP = 3;
    GAME_TO_PHONE_SEND_IMAGE = 5;
    GAME_TO_PHONE_SET_POWER_UP = 2;
    GAME_TO_PHONE_SOCIAL_PLAYER_ACTION = 6;
    GAME_TO_PHONE_UNKNOWN_COMMAND = 0;
    GAME_TO_PHONE_BLEPERIPHERAL_REQUEST = 8;
    GAME_TO_PHONE_CLEAR_POWER_UP = 1;
    GAME_TO_PHONE_CUSTOMIZE_ACTION_BUTTON = 4;
    GAME_TO_PHONE_DEFAULT_ACTIVITY_NAME = 11;
    GAME_TO_PHONE_DONT_USE_MOBILE_ALERT = 7;
    GAME_TO_PHONE_MOBILE_ALERT = 12;
    GAME_TO_PHONE_MOBILE_ALERT_CANCEL = 10;
    GAME_TO_PHONE_PACKET = 13;
    GAME_TO_PHONE_PAIRING_STATUS = 9;
}
enum LanExerciseDeviceStatus {
    LAN_EXERCISE_DEVICE_STATUS_UNKNOWN = -1;
    LAN_EXERCISE_DEVICE_STATUS_DISCOVERED = 0;
    LAN_EXERCISE_DEVICE_STATUS_CONNECTED = 1;
    LAN_EXERCISE_DEVICE_STATUS_DISCONNECTED = 2;
}
message MobileAlertResponse {
    optional int64 f1 = 1;
    optional int64 f2 = 2;
}
message BLEPeripheralCharacteristic {
    optional string f1 = 1;
    optional bytes f2 = 2;
}
enum BLEPeripheralResponse_Error {
    BL_ERR_UNK = -1;
    BL_ERR_0 = 0;
    BL_ERR_1 = 1;
    BL_ERR_2 = 2;
    BL_ERR_3 = 3;
}
enum BLEPeripheralResponse_Type {
    BL_TY_0 = 0;
    BL_TY_1 = 1;
    BL_TY_2 = 2;
    BL_TY_3 = 3;
    BL_TY_4 = 4;
    BL_TY_5 = 5;
}
message BLEPeripheralResponse {
    optional BLEPeripheralResponse_Type type = 1;
    optional BLEPeripheralResponse_Error err_kind = 2;
    optional string err_msg = 3;
    optional BLEPeripheral per = 4;
    optional BLEPeripheralCharacteristic char = 5;
}
message BLEAdvertisementDataSection {
    required BLEAdvertisementDataSection_Type type = 1;
    required bytes f2 = 2;
}
message BLEPeripheral {
    optional string f1 = 1;
    optional string f2 = 2;
    optional int32 f3 = 3;
}
message BLEAdvertisement {
    optional BLEPeripheral f1 = 1;
    repeated BLEAdvertisementDataSection f2 = 2;
    optional int32 f3 = 3; //enum <= 5
}
message PhoneToGameCommand {
    required uint32 seqno = 1;
    optional PhoneToGameCommandType command = 2;
    optional int64 rel_id = 3; //playerId for JOIN_ANOTHER_PLAYER, but 32-bit only
    optional string activity_title = 4;
    optional int64 request_profile_id = 5;
    optional string msg = 6;
    optional int64 player_msg_dst = 7;
    optional int32 api_ver = 8;
    optional uint32 f9 = 9;
    optional uint32 custom_button = 10;
    optional SocialPlayerAction spa = 11;
    // no 12
    optional MobileAlertResponse alert_resp = 13;
    // no 14-17
    optional BLEPeripheralResponse ble_resp = 18;
    optional int64 player_id = 19;
    optional string f20 = 20;
    optional bytes game_packet = 21;
    optional BLEAdvertisement ble_adv = 22;
    optional uint32 f23 = 23;
}
message PhoneToGame {
    required int64 player_id = 1;
    repeated PhoneToGameCommand commands = 2;
    optional float f3 = 3;
    optional float f4 = 4;
    optional float f5 = 5;
    optional float phone_rot = 6;
    optional float f7 = 7;
    optional float f8 = 8;
    optional double f9 = 9;
    optional uint32 seqno = 10;
}
enum BoostModeState_Type {
    BOOST1 = 1;
    BOOST2 = 2;
    BOOST3 = 3;
}
message BoostModeState {
    optional int32 f1 = 1;
    optional int32 f2 = 2;
    optional int32 f3 = 3;
    optional float f4 = 4;
    optional float f5 = 5;
}
message GameAction {
    optional GameAction_Type type = 1;
}
message GameSessionInfo {
    optional uint32 f1 = 1; //enum <= 2
    optional uint64 f2 = 2;
    optional uint64 f3 = 3;
    optional uint64 f4 = 4;
    optional string f5 = 5;
    optional string f6 = 6;
    optional uint32 f7 = 7; //enum <= 3
    optional uint32 f8 = 8;
    optional uint64 f9 = 9;
    optional bool f10 = 10;
    optional uint32 f11 = 11; //enum <= 5
    optional uint64 f12 = 12;
    optional bool f13 = 13;
}
message GameToPhone {
    optional uint32 seqno = 1;
    optional uint32 ack_seqno = 2;
    optional uint64 player_id = 3;
    optional int64 world_id = 4;
    optional PlayerState player_state = 5;
    optional bool teleport_allowed = 6;
    optional bool use_metric = 7;
    optional PlayerProfile player_profile = 8;
    repeated RiderListEntry riders = 9;
    optional float f10 = 10;
    repeated GameToPhoneCommand game_to_phone_cmds = 11;
    optional uint64 time = 12;
}
message GameToPhoneCommand {
    required uint32 seqno = 1;
    optional GameToPhoneCommandType type = 2;
    optional uint32 powerup_id = 3;
    optional string loc_name = 4;
    //5 is absent
    optional string color = 6;
    optional uint32 powerup_param = 7;
    optional uint32 f8 = 8;
    optional uint32 f9 = 9;
    optional string f10 = 10;
    optional string f11 = 11;
    optional string mask = 12; //0xffffff - or 2nd color
    optional bool f13 = 13;
    optional bytes img_bits = 14;
    optional string img_name = 15;
    optional SocialPlayerAction spa = 16;
    optional MobileAlert mobile_alert = 17;
    optional BLEPeripheralRequest ble_rq = 18;
    optional bool status_good = 19;
    optional string act_name = 20;
    optional string f21 = 21;
    optional uint32 f22 = 22;
}
message SportsDataRequest {
    optional SportsDataRequest_Type type = 1;
    optional uint32 f2 = 2; // enum <= 2
    optional uint32 f3 = 3; // enum <= 3
}
message SportsDataResponse {
    optional SportsDataResponse_Type type = 1;
    optional SportsDataResponse_DeviceModel device = 2;
    optional SportsDataResponse_ConnectionStatus cstatus = 3;
    repeated uint32 sds_f4 = 4; //enum <= 2
    repeated uint32 sds_f5 = 5; //enum <= 2
    repeated uint32 sds_f6 = 6; //enum <= 2
    optional SportsDataSample sample = 7;
    optional uint32 m_f8 = 8; //enum <= 2
    optional uint32 m_f9 = 9; //enum
}
message SportsDataSample {
    optional SportsDataSample_Type type = 1;
    optional double f2 = 2;
}
enum ClientAction_Type {
    CA_DISCARD_ACTIVITY = 4;
    CA_DISMISS_EXIT_GAME = 8;
    CA_EXIT_GAME = 6;
    CA_PROMPT_EXIT_GAME = 9;
    CA_RIDE_ON_GIVEN = 1;
    CA_SAVE_ACTIVITY_FINAL = 3;
    CA_SAVE_ACTIVITY_PREVIEW = 2;
    CA_START_CONNECTED_SESSION = 5;
    CA_START_ZWIFTING = 7;
}
message ClientAction {
    optional ClientAction_Type type = 1;
    optional uint64 f2 = 2;
    optional string f3 = 3;
    optional uint32 f4 = 4;
}
message ClientCapabilities {
    optional bool f1 = 1;
    optional bool f2 = 2;
}
message ClientInfo {
    optional string f1 = 1;
    optional string f2 = 2;
    optional string f3 = 3;
    optional string f4 = 4;
    optional ClientCapabilities caps = 5;
}
enum FitnessAttribute_Type {
    FA_HEART_RATE = 2;
    FA_PACE_RUNNING_10KM = 5;
    FA_PACE_RUNNING_1MI = 3;
    FA_PACE_RUNNING_5KM = 4;
    FA_PACE_RUNNING_FULL_MARATHON = 7;
    FA_PACE_RUNNING_HALF_MARATHON = 6;
    FA_POWER = 1;
}
message BLEPeripheralRequest {
    optional BLEPeripheralRequestType type = 1;
    repeated BLEPeripheralService servs = 2;
    optional BLEPeripheral per = 3;
}
message BLEPeripheralService {
    optional string f1 = 1;
    repeated BLEPeripheralCharacteristic chars = 2;
}
message FitnessAttribute {
    optional FitnessAttribute_Type type = 1;
    optional float f2 = 2;
    repeated FitnessAttribute_Zone zones = 3;
}
message FitnessAttribute_Zone {
    optional float f1 = 1;
    optional float f2 = 2;
    optional uint32 f3 = 3;
    optional uint32 f4 = 4;
}
message PlayerFitnessInfo {
    repeated FitnessAttribute attrs = 1;
}
message PlayerInfo {
    optional uint64 f1 = 1;
    optional bool f2 = 2;
}
message PlayerJoinedWorld {
    required uint64 f1 = 1;
    required uint64 f2 = 2;
}
enum PlayerSegmentInfo_Status {
    ABORTED = 2;
    FINISHED = 3;
    ONGOING = 1;
    STARTED = 0;
    STOPPED = 4;
}
message PlayerSegmentInfo {
    optional uint64 f1 = 1;
    optional PlayerSegmentInfo_Status status = 2;
    optional uint64 f3 = 3;
    optional uint64 f4 = 4;
    optional uint64 f5 = 5;
}
message RideOnBombRequest {
    optional bool f1 = 1;
}
message RideOnBombResponse {
    repeated bool f1 = 1;
}
message PlayerActiveSegments {
    repeated PlayerSegmentInfo segments = 1;
}
message MobileAlert {
    optional uint64 f1 = 1;
    optional string f2 = 2;
    optional string f3 = 3;
    optional uint32 f5 = 5;
    repeated MobileAlertOption alert_options = 6;
}
message MobileAlertOption {
    optional string f1 = 1;
    optional uint32 f2 = 2;
    optional uint32 f3 = 3;
}
enum NotificationType {
    ACTIVITY_COMMENT = 5;
    PRIVATE_EVENT_INVITE = 4;
    CLUB_CHAT = 8;
    CLUB_CHAT_CREATED = 10;
    CLUB_EVENT = 7;
    CLUB_EVENT_CREATED = 9;
    CLUB_INVITE = 6;
    FOLLOW_REQUEST = 0;
    FOLLOW_REQUEST_APPROVED = 2;
    NEW_FOLLOWER = 1;
    POST_ACTIVITY_RIDE_ONS = 3;
}
message Notification {
    optional uint64 f1 = 1;
    optional PlayerSocialProfile social1 = 2;
    optional PlayerSocialProfile social2 = 3;
    optional NotificationType type = 4;
    optional bool f5 = 5;
    optional uint64 f6 = 6;
    optional uint64 f7 = 7;
}
message Notifications {
    repeated Notification items = 1;
}
enum GamePacket_Sport { //not 0-based!!!!
    GP_CYCLING = 1;
    GP_RUNNING = 2;
    GP_ROWING = 3;
}
enum GamePacket_EventRole {
    LEADER = 1;
    SWEEPER = 2;
}
enum GamePacket_EventScheme {
    GP_CLUB = 2;
    GP_PRIVATE = 1;
    GP_PUBLIC = 0;
}
enum GamePacket_EventSubgroupLabel {
    A = 1;
    B = 2;
    C = 3;
    D = 4;
    E = 5;
}
message GamePacket {
    required GamePacket_Type type = 1;
    optional SportsDataRequest sports_data_request = 2;
    optional SportsDataResponse sports_data_response = 3;
    optional GameSessionInfo game_session_info = 4;
    optional ClientInfo client_info = 5;
    optional MappingData mapping_data = 6;
    optional IntersectionAhead intersection_ahead = 7;
    repeated PlayerInfo player_infos = 8;
    optional RideOnBombRequest rideon_bomb_request = 9;
    optional RideOnBombResponse rideon_bomb_response = 10;
    optional EffectRequest effect_request = 11;
    optional WorkoutInfo workout_info = 12;
    optional WorkoutState workout_state = 13;
    optional PlayerFitnessInfo player_fitness_info = 14;
    optional WorkoutActionRequest workout_action_rq = 15;
    optional ClientAction client_action = 16;
    optional MeetupState meetup_state = 17;
    optional SegmentLeaderboardResult segment_leaderboard_res = 18;
    optional PlayerActiveSegments player_active_segments = 19;
    optional PlayerSegmentInfo player_segment_info = 20;
    optional BoostModeState boost_mode_state = 21;
    optional GameAction game_action = 22;
}