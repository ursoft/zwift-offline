syntax = "proto2";
option optimize_for = LITE_RUNTIME; //as in original PC build
package protobuf;
import "Profile.proto"; //enums PlayerType and Sport
message InvitedProfileProto {
    optional uint64 player_id = 1;
    optional string firstName = 2;
    optional string lastName = 3;
    optional string imageSrc = 4;
    optional bool enrolled_zwift_academy = 5;
    optional bool male = 6;
    optional PlayerType player_type = 7;
}
enum EventInviteStatus {
    PENDING = 0;
    ACCEPTED = 1;
    REJECTED = 2;
}
message EventInviteProto {
    optional InvitedProfileProto profile = 1;
    optional EventInviteStatus status = 2;
}
message PrivateEventFeedProto {
    required uint64 event_id = 1; //read in PrivateEventsManagerV2::RegisterPrivateEvent
    optional Sport sport = 2;
    optional uint64 event_subgroup_start = 3; //IsPrivateEventExpired: return ZNETWORK_GetNetworkSyncedTimeGMT() > a1->m_eventSubgroupStart / 1000uLL + 1800
    optional uint64 route_id = 4;
    optional uint32 duration_in_seconds = 5;
    optional float distance_in_meters = 6;
    optional uint64 answered_count = 7; //stored as int32
    optional uint32 invited_total_count = 8;
    optional uint32 accepted_followee_count = 9;
    optional uint32 accepted_total_count = 10;
    optional string organizer_image_url = 11;
    optional uint64 organizer_profile_id = 12;
    optional string organizer_first_name = 13;
    optional string organizer_last_name = 14;
    optional uint64 update_date = 15;
    optional uint64 subgroup_id = 16;
    optional uint32 laps = 17;
    optional bool rubberbanding = 18; //keep together "rulesId": "1024" 
}
message PrivateEventFeedListProto {
    repeated PrivateEventFeedProto pefs = 1;
}
message PlayerJoinedEvent {
    required uint64 rel_id = 1; //subgroup id
    optional uint64 player_id = 2;
    optional uint64 pje_f3 = 3;
    optional uint64 pje_f4 = 4;
}
message PlayerLeftEvent {
    required uint64 rel_id = 1; //event id
    optional uint64 player_id = 2;
    optional uint64 ple_f3 = 3;
}
message EventSubgroupProtobuf { //where is fieldLimit, signedUp, signupStatus, registered, registrationStatus, followeeEntrantCount
//totalEntrantCount, followeeSignedUpCount, totalSignedUpCount, followeeJoinedCount, totalJoinedCount, rulesSet, workoutHash, overrideMapPreferences
//qualificationRuleIds, accessValidationResult
    optional uint64 id = 1; // 2395269
    optional string name = 2; // ex: "3R True2 Steady Ride [2.0w/kg avg] (C)"
    optional string description = 3; // ex: "Welcome to our sociable early morning/evening social group ride."
    optional uint32 evs_f4 = 4; // ""
    optional uint32 evs_f5 = 5; // 154 and others
    optional uint32 evs_f6 = 6; // 0
    optional string scode = 7; // ex: "PT3600S"
    optional uint64 rules_id = 8; // 320 and others
    optional uint64 registration_start = 9;
    optional uint64 registration_start_wt = 10;
    optional uint64 registration_end = 11;
    optional uint64 registration_end_wt = 12;
    optional uint64 line_up_start = 13;
    optional uint64 line_up_start_wt = 14;
    optional uint64 line_up_end = 15;
    optional uint64 line_up_end_wt = 16;
    optional uint64 event_subgroup_start = 17;
    optional uint64 event_subgroup_start_wt = 18;
    optional uint64 evs_f19 = 19;
    optional uint64 evs_f20 = 20; //tag416
    optional bool evs_f21 = 21; // false, tag424
    optional uint64 route_id = 22; // 3366225080
    repeated uint64 invited_leaders = 23; // tag440
    optional float distance_in_meters = 24; // tag453
    optional uint32 laps = 25; // tag456
    // no 26-28
    optional uint64 start_location = 29; // 13, tag488 [>=6 -> 'bad start location'] valid values: 1..5 (0->1)
    optional uint32 label = 30; // A:1, B:2, C:3, D:4, E:5 etc, tag496
    optional uint32 pace_type = 31; // 1 almost everywhere, 2 sometimes; tag504
    optional float from_pace_value = 32; // tag645
    optional float to_pace_value = 33; // tag653
    optional uint32 duration_in_seconds = 34; // Duration of event in seconds, tag656
    optional uint32 evs_f35 = 35; // tag664
    optional uint64 jersey_hash = 36; // 493134166, tag672
    optional bool evs_f37 = 37; // 0, tag680
    optional uint32 evs_f38 = 38; // tag688
    optional string auxiliary_url = 39; // "https://cdn.zwift.com/AudioBroadcasts/wbrgrouprideaudiov4", tag698
    optional uint64 bike_hash = 40; // 4208139356, tag704
    repeated uint64 invited_sweepers = 41; // tag712
    optional uint64 evs_f42 = 42; // tag720
    optional string custom_url = 43; // https://cdn.zwift.com/events/upload/workouts/CafeRide1.zwo, tag730
    optional bool evs_f44 = 44; // false, tag736
    optional string tags = 45; // tag746, semi-colon delimited tags eg: "fenced;3r;created_ryan;communityevent;no_kick_mode;timestamp=1603911177622"
    optional uint32 late_join_in_minutes = 46; //tag752
    optional uint64 course_id = 47; // tag760
    optional uint64 evs_f48 = 48; //tag898
    optional string route_url = 49; //tag906
    repeated int32 evs_f50 = 50; //tag912
    optional bool evs_f51 = 51; //tag920
    optional uint32 evs_f52 = 52;
    optional uint32 evs_f53 = 53;
}
enum EventVisibility {
    EV_PUBLIC = 1;
    EV_DEFINED_BY_RESOURCE_ID = 2;
    EV_SHAREABLE = 3;
}
message MicroserviceEventData {
    optional string name = 1;                // "clubs" everywhere (json: microserviceName)
    optional bytes external_resource_id = 2;   // different 16-byte bb4538bfd13346c99a4df2b3cc3b5d95 (json: microserviceExternalResourceId)
    optional EventVisibility visibility = 3; // enum 1 (json: microserviceEventVisibility)
}
message EventSeriesProtobuf { //{"id":4531,"name":"Zwift Academy Triathlon - Baseline TT","description":null,"imported":false}
    optional uint64 id = 1;          //5445 or 1485
    optional string name = 2;        //INEOSVTC or "Fast Friday"
    optional string description = 3; //"" or "Congratulations, you crushed another week of workouts! ..."
}
message EventTimeTrialOptions { //{"timeGapBetweenRowsMs":15000,"maxRows":50,"maxRidersPerRow":10}
    optional uint32 time_gap_between_rows_ms = 1;  //15000 everywhere
    optional uint32 max_rows = 2;               //50 or 25
    optional uint32 max_riders_per_row = 3;       //10 everywhere
    optional uint32 evt_f4 = 4;
    optional uint64 evt_f5 = 5;
}
enum EventType {
    EFONDO = 0;
    RACE = 1;
    GROUP_RIDE = 2;
    GROUP_WORKOUT = 3;
    TIME_TRIAL = 4;
    TEAM_TIME_TRIAL = 5;
}
enum EventCulling {
    CULLING_UNDEFINED = 0;
    CULLING_EVERYBODY = 1;
    CULLING_EVENT_ONLY = 2;
    CULLING_SUBGROUP_ONLY = 3;
}
enum EventPaceType {
    EVENT_PACE_TYPE_POWER = 1;
    EVENT_PACE_TYPE_SPEED = 2;
}
enum EventParticipation {
    EVENT_PARTICIPATION_REGISTERED = 2;
    EVENT_PARTICIPATION_SIGNED_UP = 1;
}
enum EventRegistrationStatus {
    EVENT_REGISTRATION_ENDED = 4;
    EVENT_REGISTRATION_FULL = 2;
    EVENT_REGISTRATION_NOT_STARTED = 3;
    EVENT_REGISTRATION_OPEN = 1;
}
enum EventSignupStatus {
    EVENT_SIGNUP_ENDED = 4;
    EVENT_SIGNUP_FULL = 2;
    EVENT_SIGNUP_NOT_STARTED = 3;
    EVENT_SIGNUP_OPEN = 1;
}
enum EventSubgroupLabel {
    EVENT_SUBGROUP_A = 1;
    EVENT_SUBGROUP_B = 2;
    EVENT_SUBGROUP_C = 3;
    EVENT_SUBGROUP_D = 4;
    EVENT_SUBGROUP_E = 5;
    EVENT_SUBGROUP_F = 6;
    EVENT_SUBGROUP_G = 7;
    EVENT_SUBGROUP_H = 8;
    EVENT_SUBGROUP_I = 9;
}
message EventProtobuf { //where is shortName, shortDescription, rulesSet, routeUrl, bikeHash, 
//privateEvent, followeeEntrantCount, totalEntrantCount, followeeSignedUpCount, totalSignedUpCount, followeeJoinedCount,
//totalJoinedCount, auxiliaryUrl, imageS3Name, imageS3Bucket, cullingType, recurring, recurringOffset, publishRecurring, parentId, type, workoutHash,
//customUrl, restricted, unlisted, eventSecret, accessExpression, qualificationRuleIds, minGameVersion, recordable, imported, eventTemplateId
    optional uint64 id = 1;
    optional uint64 server_realm = 2;
    optional string name = 3;
    optional string description = 4;
    optional uint64 event_start = 5; // Start time (epoch time in ms)
    optional string e_f6 = 6;
    optional float distance_in_meters = 7;
    optional uint32 laps = 8;
    optional uint32 e_f9 = 9;
    repeated EventSubgroupProtobuf categories = 10; //event_subgroup_size() <= MAX_SUBGROUPS(6)
    optional string e_f11 = 11;
    optional string image_url = 12;
    optional uint32 duration_in_seconds = 13;
    optional uint64 route_id = 14;
    optional uint64 rules_id = 15;
    optional uint32 e_f16 = 16;
    optional bool visible = 17;
    optional uint64 jersey_hash = 18;
    optional string e_f19 = 19;
    optional string e_f20 = 20;
    optional string e_f21 = 21;
    optional Sport sport = 22;
    optional uint64 e_f23 = 23;
    optional EventType event_type = 24;
    optional uint64 e_f25 = 25;
    optional string e_f26 = 26;
    optional uint32 e_f27 = 27; //enum <= 5, saw = 2
    optional bool override_map_preferences = 28;
    optional bool invisible_to_non_participants = 29;
    optional EventSeriesProtobuf ev_series = 30;
    optional string tags = 31; // semi-colon delimited tags
    optional uint64 e_f32 = 32;
    optional bool e_wtrl = 33; //WTRL (World Tactical Racing Leagues)
    optional uint32 late_join_in_minutes = 34;
    optional uint64 course_id = 35;
    optional EventTimeTrialOptions tto = 36;
    optional string e_f37 = 37;
    optional string e_f38 = 38;
    optional uint32 e_f39 = 39;
    optional MicroserviceEventData msed = 40;
    repeated uint32 e_f41 = 41;
    optional uint32 e_f42 = 42;
    optional uint32 e_f43 = 43;
    optional bool e_f44 = 44;
}
message EventsProtobuf {
    repeated EventProtobuf events = 1;
}
message PrivateEventProto {
    optional uint64 id = 1;
    optional Sport sport = 2;
    optional uint64 event_start = 3;
    optional uint64 route_id = 4;
    optional uint64 start_location = 5;
    optional uint32 duration_in_seconds = 6;
    optional float distance_in_meters = 7;
    optional string description = 8;
    optional uint64 workout_hash = 9; //or laps
    optional uint64 organizer_id = 10;
    repeated EventInviteProto event_invites = 11;
    optional bool show_results = 12;
    optional uint32 laps = 13; //or workoutHash
    optional bool rubberbanding = 14;
}
message LateJoinInformation {
    optional uint64 road_id = 1;
    optional float road_time = 2;
    optional bool is_forward = 3;
    optional int64 organizer_id = 4; // leader of meetup or -1
    optional uint32 lj_f5 = 5; //64 on wire
    optional uint32 lj_f6 = 6; //64 on wire
    optional uint32 lj_f7 = 7; //64 on wire
}
message PlayerRouteDistance {
    required int32 player_id = 1;
    optional float distance_covered = 2; //not sure
    optional int32 millisec_to_leader = 3;
    optional int32 event_pos = 4;
}
message EventSubgroupPlacements {
    required int32 position = 1; //UdpStatistics::registerFanViewLatestPlayerStateInfo
    repeated PlayerRouteDistance player_rd1 = 2;
    repeated PlayerRouteDistance player_rd2 = 3;
    repeated PlayerRouteDistance event_rider_positions = 4;
    repeated PlayerRouteDistance player_rd4 = 5;
    optional int32 event_total_riders = 6;
    optional int32 bike_network_id = 7;
    optional int32 millisec_to_leader = 8; //ZNETWORK_INTERNAL_ProcessPlayerPackets
    optional float esp_f9 = 9; //or fixed
    repeated PlayerRouteDistance player_rd5 = 10;
}
message CrossingStartingLineProto {
    optional uint64 f1 = 1; //time???
}
enum MeetupState_Type {
    MEETUP_INVITED = 0;
    MEETUP_JOINED = 1;
}
message MeetupState {
    optional MeetupState_Type type = 1;
    optional uint64 f2 = 2;
}
enum LeaderboardType {
    LIVE = 0;
    THIRTY_DAY = 1;
}
message SegmentLeaderboardResult {
    optional uint64 f1 = 1;
    optional uint32 f2 = 2; //enum <= 1
    optional uint64 f3 = 3;
    optional uint64 f4 = 4;
    optional uint64 f5 = 5;
    optional uint64 f6 = 6;
    optional string f7 = 7;
    optional string f8 = 8;
    optional uint64 f9 = 9;
    optional string f10 = 10;
    optional uint64 f11 = 11;
    optional uint32 f12 = 12; //enum <= 1
    optional uint32 f13 = 13;
    optional bool f14 = 14;
    optional uint32 f15 = 15;
    optional uint32 f16 = 16;
    optional uint32 f17 = 17; //enum <= 3
    optional uint64 f18 = 18;
    optional string f19 = 19;
}
message RiderListEntry {
    required string f1 = 1;
    optional uint32 f2 = 2; //enum <=8
    optional uint64 f3 = 3;
    optional uint32 f4 = 4; //enum <2
    optional uint32 f5 = 5;
    optional uint32 f6 = 6;
    optional uint32 f7 = 7;
    repeated uint32 f8 = 8; //enum <=8
}