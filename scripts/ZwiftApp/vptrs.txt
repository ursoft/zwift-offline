ZwiftAuthenticationManager vptrs:
dtr: vptr[0]
isAccessTokenInvalidOrExpired: vptr[1] (+8)
getAccessTokenHeader: vptr[2] (+16)
getRefreshTokenStr: vptr[3]
getRefreshToken: vptr[4]
getSessionStateFromToken: vptr[5]
getSubjectFromToken: vptr[6]
getOauthClient: vptr[7]
setLoggedIn: vptr[8]
getLoggedIn: vptr[9]
attendToAccessToken: vptr[10]
setRequestId: vptr[11]
getRequestId: vptr[12]
setAccessTokenAsExpired: vptr[13]
resetCredentials: vptr[14]
setCredentials: 15
setCredentialsOld 16
setCredentialsMid 17

CurlHttpConnection vptrs:
dtr: vptr[0]
setAuthorizationHeader 1
clearAuthorizationHeader 2
setTokenInfo 3
clearTokenInfo 4
setSessionIdHeader 5
setRequestId 6
setTimeout 7
getTimeout 8
setUploadTimeout 9
[10, 80] performGet
[11, 88] performDelete
[12, 96] performPostStr
[13, 104] performPostVec
[14, 112] performPost(str)
[15, 120] performPost 15
performPostWithTimeout 16
[17, 136] performPostWithHash 17
[18, 144] performPut ct,at
performPut ct 19
[20, 160] performPut ac 20
[21, 168] performPutOrPost
performPutOrPost 22
escapeUrl 23

std::_Associated_state (=std::future)
dtr: 0
_Wait(void): 1
Get_value(bool): 2
Has_deferred_function(void): 3
Run_deferred_function(class std::unique_lock<class std::mutex> &): 4
Do_notify(class std::unique_lock<class std::mutex> *,bool): 5

WorldClockService
[0,  0] dtr
[1,  8] isInitialized()
[2, 16] getWorldTime()

HashSeedService
[0,  0] dtr
[1,  8] calculateRefreshRelaySessionInAdvance(std::chrono::duration<long,std::ratio<60l,1l>>)
[2, 16] onHashSeedsReceived(std::shared_ptr<zwift_network::NetworkResponse<zwift::protobuf::HashSeeds> const> const&)
[3, 24] onRefreshRelaySession(std::shared_ptr<zwift_network::NetworkResponse<zwift::protobuf::RelaySessionRefreshResponse> const> const&)

NetworkClientImpl
[0,  0] NetworkClientImpl__handleDisconnectRequested
[1,  8] handleWorldAndMapRevisionChanged
[2, 16] dtr

CriticalPowerCurve
[0,  0] dtr
[1,  8] RecorderComponent::Init
[2, 16] CriticalPowerCurve::Update
[3, 24] CriticalPowerCurve::InitializeDrawData
[4, 32] CriticalPowerCurve::GetBestTimeAverage
[5, 40] CriticalPowerCurve::Reset
[6, 48] CriticalPowerCurve::GetDataPoints
[7, 56] RecorderComponent::GetDataPointsVEC3
[8, 64] CriticalPowerCurve::AddDataPoint
[9, 72] RecorderComponent::AddDataPointVEC3

BikeEntity
[0,  0] BikeEntity_dtr
[1,  8] ret 0 Entity::HandleEvent(EVENT_ID,std::__va_list)
[2, 16] Entity::GetPosition
[3, 24] Entity::NetworkUpdate
[4, 32] Entity::Initialize(tinyxml2::XMLElement const*)
[5, 40] 
[6, 48] 
[7, 56] 
[8, 64] 
[9, 72] 