ZwiftAuthenticationManager vptrs:
dtr: vptr[0]
isAccessTokenInvalidOrExpired: vptr[1] (+8)
getAccessTokenHeader: vptr[2] (+16)
getRefreshTokenStr: vptr[3]
getRefreshToken: vptr[4]
getSessionStateFromToken: vptr[5]
getSubjectFromToken: vptr[6]
getOauthClient: vptr[7]
setLoggedIn: vptr[8]
getLoggedIn: vptr[9]
attendToAccessToken: vptr[10]
setRequestId: vptr[11]
getRequestId: vptr[12]
setAccessTokenAsExpired: vptr[13]
resetCredentials: vptr[14]
setCredentials: 15
setCredentialsOld 16
setCredentialsMid 17

CurlHttpConnection vptrs:
dtr: vptr[0]
setAuthorizationHeader 1
clearAuthorizationHeader 2
setTokenInfo 3
clearTokenInfo 4
setSessionIdHeader 5
setRequestId 6
setTimeout 7
getTimeout 8
setUploadTimeout 9
[10, 80] performGet
[11, 88] performDelete
[12, 96] performPostStr
[13, 104] performPostVec
[14, 112] performPost(str)
[15, 120] performPost 15
performPostWithTimeout 16
[17, 136] performPostWithHash 17
[18, 144] performPut ct,at
performPut ct 19
[20, 160] performPut ac 20
[21, 168] performPutOrPost
performPutOrPost 22
escapeUrl 23

std::_Associated_state (=std::future)
dtr: 0
_Wait(void): 1
Get_value(bool): 2
Has_deferred_function(void): 3
Run_deferred_function(class std::unique_lock<class std::mutex> &): 4
Do_notify(class std::unique_lock<class std::mutex> *,bool): 5

WorldClockService
[0,  0] dtr
[1,  8] isInitialized()
[2, 16] getWorldTime()

HashSeedService
[0,  0] dtr
[1,  8] calculateRefreshRelaySessionInAdvance(std::chrono::duration<long,std::ratio<60l,1l>>)
[2, 16] onHashSeedsReceived(std::shared_ptr<zwift_network::NetworkResponse<zwift::protobuf::HashSeeds> const> const&)
[3, 24] onRefreshRelaySession(std::shared_ptr<zwift_network::NetworkResponse<zwift::protobuf::RelaySessionRefreshResponse> const> const&)

NetworkClientImpl
[0,  0] NetworkClientImpl__handleDisconnectRequested
[1,  8] handleWorldAndMapRevisionChanged
[2, 16] dtr

CriticalPowerCurve
[0,  0] dtr
[1,  8] RecorderComponent::Init
[2, 16] CriticalPowerCurve::Update
[3, 24] CriticalPowerCurve::InitializeDrawData
[4, 32] CriticalPowerCurve::GetBestTimeAverage
[5, 40] CriticalPowerCurve::Reset
[6, 48] CriticalPowerCurve::GetDataPoints
[7, 56] RecorderComponent::GetDataPointsVEC3
[8, 64] CriticalPowerCurve::AddDataPoint
[9, 72] RecorderComponent::AddDataPointVEC3

BikeEntity
[0,  0] BikeEntity_dtr
[1,  8] ret 0 Entity::HandleEvent(EVENT_ID,std::__va_list)
[2, 16] Entity::GetPosition
[3, 24] Entity::NetworkUpdate
[4, 32] Entity::Initialize(tinyxml2::XMLElement const*)
[5, 40] 
[6, 48] 
[7, 56] 
[8, 64] 
[9, 72] 

RoadManager
[0,  0] - dtr
[1,  8] - GetRoadSegment(int)
[2, 16] - GetRoadCount(void)

RouteManager
[0] GetRoute

CameraManager
[0] dtr
[1] GetSelectedCamera

RoadSegment
[0,   0] RoadSegment::~RoadSegment()
1 .data.rel.ro:0000000002363218                 DCQ __cxa_pure_virtual
2 .data.rel.ro:0000000002363220                 DCQ __cxa_pure_virtual
3 .data.rel.ro:0000000002363228                 DCQ __cxa_pure_virtual
4 .data.rel.ro:0000000002363230                 DCQ __cxa_pure_virtual
5 .data.rel.ro:0000000002363238                 DCQ __cxa_pure_virtual
6 FindClosestPointOnRoad(VEC3 const&,double,int)
7 FindClosestPointOnRoadF(VEC3 const&,float,int)
8 FindClosestPointOnRoad2D(VEC3,float,int)
9 CalcPosByShortDistWithOffset(double,double,double,double,VEC3 *)
10 CalculateRoadPositionByDist(double,double,VEC3 *)
11 CalculateRoadPositionAtTime(double,bool)
12 CalculateRoadPositionAtTimeF(float,bool)
13 GetRoadWidth(double,bool,float *,float *,RoadMarkerEntity const**)
14 GetRoadOffset(double)
15 GetShoulderHalfWidth(double)
16 GetEdgeHalfWidth(double)
17 GetLoiterHalfWidth(double)
18 GetRoadColor(double)
19 GetMarkerInfluence(double,RoadMarkerEntity const*)
GetCyclistAltitudeAtRoadTime(VEC3 const&,double,bool)
GetAbsoluteSplineTimeOffsetFromAtoB(double,double,bool)
UpdateCyclistWheelAltitudesAtRoadTime(VEC3 &,double,VEC3 &,double,bool)
Render(GFX_RenderPass)
NavRender(VEC4 const&,double,double)
GenerateRoadMesh(void)
GenerateNavRoadMesh(void)
Load(tinyxml2::XMLElement *)
PostInitialize(void)
CalculateSplinePoints(void)
GetNeighboringRoadNodes(RoadNode *,RoadNode **,RoadNode **)
IsPointInRoadRegion(VEC3 const&)
IsPointInRoadRegion2D(VEC3 const&)
GetNodeBasedOnRoadTime(double)
GetRoadNodesPtr(void)
GetRoadNodeCount(void)
GetRoadNodeAt(int)
GetRoadNodeAt(int)
GetFirstNode(void)
GetFirstNode(void)
GetSecondNode(void)
GetSecondNode(void)
GetLastNode(void)
GetLastNode(void)
GetSecondLastNode(void)
GetSecondLastNode(void)
IsFirstNode(RoadNode const*)
IsSecondNode(RoadNode const*)
IsSecondLastNode(RoadNode const*)
IsLastNode(RoadNode const*)
IndexOfNode(RoadNode const*)
IsPreviousNodeStraight(RoadNode const*)
GetRoadPointLinearDistanceAt(int)
GetSmallDistanceRoadTime(void)
Update(float)
ConvertDistanceToRoadTime(float)
ConvertRoadTimeToDistance(double)
GetMinimumTessellationDistance(void)
GetMaxInstersectionTime(bool,ulong long,uint)
GetRoadMarkersPtr(void)
GetRoadMarkers(void)
AddMarkers(Entity *,int *)
IsRoadInvisible(double)
GetStyleIndex(double,uint &,uint *)
GetFirstRoadMarkerBasedOnRoadTime(double,bool)
GetClosestRoadMarkerBasedOnRoadTime(double,uint *)
GetAllRoadMarkersBasedOnRoadTime(double,std::vector<RoadMarkerEntity const*> *)
GetIntersectionMarkerBasedOnRoadTime(double)
GetClosestIntersectionMarkerToRoadTime(double,uint *)
GetClosestForwardIntersectionMarkerToRoadTime(double,bool,uint *)
GetClosestIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
GetClosestForwardIntersectionMarkerToRoadTimeWithValidOption(double,bool,uint *)
GetIntersectionMarkerBasedOnId(int)
GetCourseDistanceAtSplineTime(double,double *)
GetSplineTimeAtCourseDistance(float)
GetCourseDistanceBetweenSplineTimes(double,double,bool,double *)
GetCourseHeightAtDistance(float)
GetDefaultWidth(void)
GetDefaultOffset(void)
GetDefaultShoulderWidth(void)
GetRiderBoundsRatio(void)
GetCenterRightRatio(void)
GetCourseLength(void)
GetMinAltitude(void)
GetMaxAltitude(void)
GetMinExtents(void)
GetMaxExtents(void)
GetMaxGradient(void)
GetMetersClimbed(void)
GetCurvePointCount(void)
GetGlobalNodeVisualOffset(void)
GetPhysicSlope(void)
IsLooped(void)
SnapMarkersToTesselation(void)
IsOneWay(void)
AllowFullWidthSteering(void)
GetDefaultRoadStyleIndex(void)
IsRightTraffic(void)
GetTesselationCount(void)
SetBoundingRegion(VEC3 const&,VEC3 const&)
ShouldDrawTransparentInNav(int)
GetNavDrawLayer(void)
SetSportAllowOnRoad(ulong long,bool)
GetRoadTextureLength(void)
GetRoadTextureWidthScale(void)
SetRoadTextureLength(float)
SetRoadTextureWidthScale(float)
GetRoadSamplePoints(void)
GetSpeedGates(void)
AddSpeedGate(SpeedGateEntity *)
CheckForSpeedGates(float,float,bool)
RecordRiderOffCourse(float,bool)
ResetSpeedGates(void)
SetGatesReady(bool)
AddPOI(POIEntity *)
CheckForPOI(float)
GetPaddockExitRoadTime(void)
GetSplineType(void)
SetSplineType(RoadSegmentSplineType::Type)
SetDefaultStyleColor(uint)
GetDefaultStyleColor(void)
SetTintColor(uint)
GetTintColor(void)
GetRiderOffsetBlendDistance(void)
SetRiderOffsetBlendDistance(float)
GetDefaultLoiterOffset(void)
SetDefaultLoiterOffset(float)
GetRoadEdge(VEC3 const&,VEC3,double,float)

XMLDoc
[0] dtr
[1] Load
[2] SaveAs(char const*,bool)
[3] UserLoad
[4] UserSaveAs(char const*,bool)
[5] BufferLoad

XMLNode